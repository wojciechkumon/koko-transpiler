Package org.newkoko.c;


Helpers
    all	= [0 .. 127] ;
    digit = ['0' .. '9'] ;
    not_digit = ['_' + [['a' .. 'z'] + ['A' .. 'Z']]] ;
    digit_sequence = digit+ ;
    fractional_constant	= digit_sequence ? '.' digit_sequence | digit_sequence '.' ;
    sign = '+' | '-' ;
    exponent_part = ( 'e' | 'E' ) sign ? digit_sequence ;
    escape_sequence = '\' ''' | '\"' | '\?' | '\\' | '\a' | '\b' | '\f' | '\n' | '\r' | '\t' | '\v' ;
    string_char	= [ all - [ '"' + [ '\' + [ 10 + 13 ] ] ] ] | escape_sequence ;
    string_char_sequence = string_char+ ;
    not_zero_digit = ['1' .. '9'] ;
    cr = 13 ;
    lf = 10 ;
    eol = cr lf | cr | lf ;
    not_cr_lf = [all - [cr + lf]] ;
    not_star = [all - '*'] ;
    not_star_slash = [not_star - '/'] ;
    tab = 9;
    short_comment = '//' not_cr_lf* eol ;
    long_comment = '/*' not_star* '*'+ (not_star_slash not_star* '*'+)* '/' ;


Tokens

    dot = '.' ;
    comma = ',' ;
    colon = ':' ;
    semicolon = ';' ;
    l_par = '(' ;
    r_par = ')' ;
    l_bracket = '[' ;
    r_bracket = ']' ;
    l_brace = '{' ;
    r_brace = '}' ;
    star = '*' ;
    div = '/' ;
    mod = '%' ;
    ampersand = '&' ;
    plus = '+' ;
    minus = '-' ;
    excl_mark = '!' ;
    quest_mark = '?' ;
    eq = '=' ;
    eq_eq = '==' ;
    not_eq = '!=' ;
    lt = '<' ;
    lt_eq = '<=' ;
    gt = '>' ;
    gt_eq = '>=' ;
    ampersand_ampersand = '&&' ;
    bar_bar = '||' ;
    star_equal = '*=' ;
    div_equal = '/=' ;
    mod_equal = '%=' ;
    plus_equal = '+=' ;
    minus_equal = '-=' ;
    ampersand_equal = '&=' ;
    caret_equal = '^=' ;
    bar_equal = '|=' ;
    case = 'case' ;
    if = 'if' ;
    else = 'else' ;
    switch = 'switch' ;
    while = 'while' ;
    for = 'for' ;
    continue = 'continue' ;
    break = 'break' ;
    return = 'return' ;
    void = 'void' ;
    int = 'int' ;
    long = 'long' ;
    double = 'double' ;
    identifier = not_digit (digit | not_digit)* ;
    floating_constant = fractional_constant exponent_part ? | digit_sequence exponent_part ;
    string_literal = 'L' ? '"' string_char_sequence ? '"' ;
    integer_constant = not_zero_digit digit* | '0';
    blank = (eol | tab | ' ')+ ;
    comment = short_comment | long_comment ;


Ignored Tokens
    blank,
    comment;


Productions
    program = function_or_statement* ;

    function_or_statement = {function} function
                            | {statement} statement ;

    function = function_type function_declaration function_body ;

    function_type = {void} void
                    | type ;

    type = {int} int
            | {long} long
            | {double} double ;

    function_declaration = identifier l_par parameter_list? r_par ;

    parameter_list = parameter next_parameter* ;

    parameter = type identifier ;

    next_parameter = comma parameter ;

    function_body = l_brace statement* stop_statement? r_brace ;

    statement = simple_statement semicolon ; // TODO

    simple_statement = {new_variable} new_variable
                       | {call_expression} call_expression ;

    new_variable = type identifier eq value ; // TODO

    call_expression	= identifier l_par arg_list ? r_par ;

    arg_list = value arg_list_tail * ;

    arg_list_tail = comma value ;

    stop_statement = {return} return semicolon
                        | {return_value} return value semicolon
                        | {return_par} return l_par value r_par semicolon ;

    value = {identifier} identifier
            | {constant} constant ;

    constant = {string} string_literal
                | {integer} integer_constant
                | {double} floating_constant ;