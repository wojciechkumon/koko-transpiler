/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.koko.node;

import java.util.*;
import org.koko.analysis.*;

@SuppressWarnings("nls")
public final class ACondPureExpr extends PPureExpr
{
    private PPureExpr _pred_;
    private final LinkedList<PExpr> _iftrue_ = new LinkedList<PExpr>();
    private final LinkedList<PExpr> _iffalse_ = new LinkedList<PExpr>();

    public ACondPureExpr()
    {
        // Constructor
    }

    public ACondPureExpr(
        @SuppressWarnings("hiding") PPureExpr _pred_,
        @SuppressWarnings("hiding") List<?> _iftrue_,
        @SuppressWarnings("hiding") List<?> _iffalse_)
    {
        // Constructor
        setPred(_pred_);

        setIftrue(_iftrue_);

        setIffalse(_iffalse_);

    }

    @Override
    public Object clone()
    {
        return new ACondPureExpr(
            cloneNode(this._pred_),
            cloneList(this._iftrue_),
            cloneList(this._iffalse_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACondPureExpr(this);
    }

    public PPureExpr getPred()
    {
        return this._pred_;
    }

    public void setPred(PPureExpr node)
    {
        if(this._pred_ != null)
        {
            this._pred_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pred_ = node;
    }

    public LinkedList<PExpr> getIftrue()
    {
        return this._iftrue_;
    }

    public void setIftrue(List<?> list)
    {
        for(PExpr e : this._iftrue_)
        {
            e.parent(null);
        }
        this._iftrue_.clear();

        for(Object obj_e : list)
        {
            PExpr e = (PExpr) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._iftrue_.add(e);
        }
    }

    public LinkedList<PExpr> getIffalse()
    {
        return this._iffalse_;
    }

    public void setIffalse(List<?> list)
    {
        for(PExpr e : this._iffalse_)
        {
            e.parent(null);
        }
        this._iffalse_.clear();

        for(Object obj_e : list)
        {
            PExpr e = (PExpr) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._iffalse_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pred_)
            + toString(this._iftrue_)
            + toString(this._iffalse_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pred_ == child)
        {
            this._pred_ = null;
            return;
        }

        if(this._iftrue_.remove(child))
        {
            return;
        }

        if(this._iffalse_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pred_ == oldChild)
        {
            setPred((PPureExpr) newChild);
            return;
        }

        for(ListIterator<PExpr> i = this._iftrue_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExpr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PExpr> i = this._iffalse_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExpr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
