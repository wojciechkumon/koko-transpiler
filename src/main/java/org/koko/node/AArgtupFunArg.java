/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.koko.node;

import org.koko.analysis.*;

@SuppressWarnings("nls")
public final class AArgtupFunArg extends PFunArg
{
    private TInt _argType_;
    private TIdentifier _argVar_;

    public AArgtupFunArg()
    {
        // Constructor
    }

    public AArgtupFunArg(
        @SuppressWarnings("hiding") TInt _argType_,
        @SuppressWarnings("hiding") TIdentifier _argVar_)
    {
        // Constructor
        setArgType(_argType_);

        setArgVar(_argVar_);

    }

    @Override
    public Object clone()
    {
        return new AArgtupFunArg(
            cloneNode(this._argType_),
            cloneNode(this._argVar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArgtupFunArg(this);
    }

    public TInt getArgType()
    {
        return this._argType_;
    }

    public void setArgType(TInt node)
    {
        if(this._argType_ != null)
        {
            this._argType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argType_ = node;
    }

    public TIdentifier getArgVar()
    {
        return this._argVar_;
    }

    public void setArgVar(TIdentifier node)
    {
        if(this._argVar_ != null)
        {
            this._argVar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argVar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._argType_)
            + toString(this._argVar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._argType_ == child)
        {
            this._argType_ = null;
            return;
        }

        if(this._argVar_ == child)
        {
            this._argVar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._argType_ == oldChild)
        {
            setArgType((TInt) newChild);
            return;
        }

        if(this._argVar_ == oldChild)
        {
            setArgVar((TIdentifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
