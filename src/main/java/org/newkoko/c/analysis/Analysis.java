/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.newkoko.c.analysis;

import org.newkoko.c.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAFunctionFunctionOrStatement(AFunctionFunctionOrStatement node);
    void caseAStatementFunctionOrStatement(AStatementFunctionOrStatement node);
    void caseAFunction(AFunction node);
    void caseAFunctionDeclaration(AFunctionDeclaration node);
    void caseAVoidFunctionType(AVoidFunctionType node);
    void caseAFunctionType(AFunctionType node);
    void caseAIntType(AIntType node);
    void caseALongType(ALongType node);
    void caseADoubleType(ADoubleType node);
    void caseAParameterList(AParameterList node);
    void caseAParameter(AParameter node);
    void caseANextParameter(ANextParameter node);
    void caseAFunctionBody(AFunctionBody node);
    void caseASimpleStatementStatement(ASimpleStatementStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseAIfElseStatement(AIfElseStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAForStatement(AForStatement node);
    void caseARelationConditionalExpression(ARelationConditionalExpression node);
    void caseAValueConditionalExpression(AValueConditionalExpression node);
    void caseAEqEqRelationOp(AEqEqRelationOp node);
    void caseANotEqRelationOp(ANotEqRelationOp node);
    void caseALtRelationOp(ALtRelationOp node);
    void caseALtEqRelationOp(ALtEqRelationOp node);
    void caseAGtRelationOp(AGtRelationOp node);
    void caseAGtEqRelationOp(AGtEqRelationOp node);
    void caseANewVariableSimpleStatement(ANewVariableSimpleStatement node);
    void caseAAssignVariableSimpleStatement(AAssignVariableSimpleStatement node);
    void caseACallExpressionSimpleStatement(ACallExpressionSimpleStatement node);
    void caseANewVariable(ANewVariable node);
    void caseAAssignVariable(AAssignVariable node);
    void caseAEqAssignOp(AEqAssignOp node);
    void caseAPlusEqAssignOp(APlusEqAssignOp node);
    void caseAMinusEqAssignOp(AMinusEqAssignOp node);
    void caseAStarEqAssignOp(AStarEqAssignOp node);
    void caseADivEqAssignOp(ADivEqAssignOp node);
    void caseAModEqAssignOp(AModEqAssignOp node);
    void caseAUnaryRightHandSide(AUnaryRightHandSide node);
    void caseABinaryRightHandSide(ABinaryRightHandSide node);
    void caseABinaryExpressionBinaryExpression(ABinaryExpressionBinaryExpression node);
    void caseARelationOpBinaryOp(ARelationOpBinaryOp node);
    void caseAStarBinaryOp(AStarBinaryOp node);
    void caseADivBinaryOp(ADivBinaryOp node);
    void caseAModBinaryOp(AModBinaryOp node);
    void caseAPlusBinaryOp(APlusBinaryOp node);
    void caseAMinusBinaryOp(AMinusBinaryOp node);
    void caseAAmpersandAmpersandBinaryOp(AAmpersandAmpersandBinaryOp node);
    void caseABarBarBinaryOp(ABarBarBinaryOp node);
    void caseAValueUnaryExpression(AValueUnaryExpression node);
    void caseACallUnaryExpression(ACallUnaryExpression node);
    void caseAUnaryOpUnaryExpression(AUnaryOpUnaryExpression node);
    void caseAParUnaryOpUnaryExpression(AParUnaryOpUnaryExpression node);
    void caseAMinusUnaryOp(AMinusUnaryOp node);
    void caseAExclMarkUnaryOp(AExclMarkUnaryOp node);
    void caseACallExpression(ACallExpression node);
    void caseAStatementBlock(AStatementBlock node);
    void caseAArgList(AArgList node);
    void caseAArgListTail(AArgListTail node);
    void caseAReturnStopStatement(AReturnStopStatement node);
    void caseAReturnValueStopStatement(AReturnValueStopStatement node);
    void caseAReturnParStopStatement(AReturnParStopStatement node);
    void caseAIdentifierValue(AIdentifierValue node);
    void caseAConstantValue(AConstantValue node);
    void caseAStringConstant(AStringConstant node);
    void caseAIntegerConstant(AIntegerConstant node);
    void caseADoubleConstant(ADoubleConstant node);

    void caseTComma(TComma node);
    void caseTColon(TColon node);
    void caseTSemicolon(TSemicolon node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTStar(TStar node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTAmpersand(TAmpersand node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTExclMark(TExclMark node);
    void caseTQuestMark(TQuestMark node);
    void caseTEq(TEq node);
    void caseTEqEq(TEqEq node);
    void caseTNotEq(TNotEq node);
    void caseTLt(TLt node);
    void caseTLtEq(TLtEq node);
    void caseTGt(TGt node);
    void caseTGtEq(TGtEq node);
    void caseTAmpersandAmpersand(TAmpersandAmpersand node);
    void caseTBarBar(TBarBar node);
    void caseTStarEqual(TStarEqual node);
    void caseTDivEqual(TDivEqual node);
    void caseTModEqual(TModEqual node);
    void caseTPlusEqual(TPlusEqual node);
    void caseTMinusEqual(TMinusEqual node);
    void caseTCase(TCase node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTSwitch(TSwitch node);
    void caseTWhile(TWhile node);
    void caseTFor(TFor node);
    void caseTIn(TIn node);
    void caseTContinue(TContinue node);
    void caseTBreak(TBreak node);
    void caseTReturn(TReturn node);
    void caseTFun(TFun node);
    void caseTVoid(TVoid node);
    void caseTInt(TInt node);
    void caseTLong(TLong node);
    void caseTDouble(TDouble node);
    void caseTIdentifier(TIdentifier node);
    void caseTFloatingConstant(TFloatingConstant node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTIntegerConstant(TIntegerConstant node);
    void caseTBlank(TBlank node);
    void caseTComment(TComment node);
    void caseEOF(EOF node);
}
