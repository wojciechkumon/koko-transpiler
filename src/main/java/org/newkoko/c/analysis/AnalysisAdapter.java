/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.newkoko.c.analysis;

import java.util.*;
import org.newkoko.c.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionFunctionOrStatement(AFunctionFunctionOrStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatementFunctionOrStatement(AStatementFunctionOrStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunction(AFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVoidFunctionType(AVoidFunctionType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionType(AFunctionType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALongType(ALongType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADoubleType(ADoubleType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameterList(AParameterList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParameter(AParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANextParameter(ANextParameter node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionBody(AFunctionBody node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASimpleStatementStatement(ASimpleStatementStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfElseStatement(AIfElseStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForStatement(AForStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARelationConditionalExpression(ARelationConditionalExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValueConditionalExpression(AValueConditionalExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqEqRelationOp(AEqEqRelationOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotEqRelationOp(ANotEqRelationOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALtRelationOp(ALtRelationOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALtEqRelationOp(ALtEqRelationOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtRelationOp(AGtRelationOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtEqRelationOp(AGtEqRelationOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANewVariableSimpleStatement(ANewVariableSimpleStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignVariableSimpleStatement(AAssignVariableSimpleStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallExpressionSimpleStatement(ACallExpressionSimpleStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANewVariable(ANewVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignVariable(AAssignVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqAssignOp(AEqAssignOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusEqAssignOp(APlusEqAssignOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusEqAssignOp(AMinusEqAssignOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStarEqAssignOp(AStarEqAssignOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivEqAssignOp(ADivEqAssignOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModEqAssignOp(AModEqAssignOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryRightHandSide(AUnaryRightHandSide node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABinaryRightHandSide(ABinaryRightHandSide node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABinaryExpressionBinaryExpression(ABinaryExpressionBinaryExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARelationOpBinaryOp(ARelationOpBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStarBinaryOp(AStarBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivBinaryOp(ADivBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModBinaryOp(AModBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusBinaryOp(APlusBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusBinaryOp(AMinusBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAmpersandAmpersandBinaryOp(AAmpersandAmpersandBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABarBarBinaryOp(ABarBarBinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValueUnaryExpression(AValueUnaryExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallUnaryExpression(ACallUnaryExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryOpUnaryExpression(AUnaryOpUnaryExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParUnaryOpUnaryExpression(AParUnaryOpUnaryExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusUnaryOp(AMinusUnaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExclMarkUnaryOp(AExclMarkUnaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallExpression(ACallExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStatementBlock(AStatementBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgList(AArgList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArgListTail(AArgListTail node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnStopStatement(AReturnStopStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnValueStopStatement(AReturnValueStopStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnParStopStatement(AReturnParStopStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifierValue(AIdentifierValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConstantValue(AConstantValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringConstant(AStringConstant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerConstant(AIntegerConstant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADoubleConstant(ADoubleConstant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAmpersand(TAmpersand node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTExclMark(TExclMark node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTQuestMark(TQuestMark node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqEq(TEqEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNotEq(TNotEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLtEq(TLtEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGtEq(TGtEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAmpersandAmpersand(TAmpersandAmpersand node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBarBar(TBarBar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStarEqual(TStarEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivEqual(TDivEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTModEqual(TModEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlusEqual(TPlusEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinusEqual(TMinusEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSwitch(TSwitch node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTContinue(TContinue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBreak(TBreak node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFun(TFun node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVoid(TVoid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLong(TLong node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDouble(TDouble node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFloatingConstant(TFloatingConstant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntegerConstant(TIntegerConstant node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
