/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.newkoko.c.parser;

import org.newkoko.c.lexer.*;
import org.newkoko.c.node.*;
import org.newkoko.c.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAprogram1Program */
		    {
			ArrayList<Object> list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AAprogram2Program */
		    {
			ArrayList<Object> list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce AFunctionFunctionOrStatement */
		    {
			ArrayList<Object> list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AStatementFunctionOrStatement */
		    {
			ArrayList<Object> list = new3();
			push(goTo(1), list, false);
		    }
		    break;
                    case 4: /* reduce AFunction */
		    {
			ArrayList<Object> list = new4();
			push(goTo(2), list, false);
		    }
		    break;
                    case 5: /* reduce AAfunctiondeclaration1FunctionDeclaration */
		    {
			ArrayList<Object> list = new5();
			push(goTo(3), list, false);
		    }
		    break;
                    case 6: /* reduce AAfunctiondeclaration2FunctionDeclaration */
		    {
			ArrayList<Object> list = new6();
			push(goTo(3), list, false);
		    }
		    break;
                    case 7: /* reduce AVoidFunctionType */
		    {
			ArrayList<Object> list = new7();
			push(goTo(4), list, false);
		    }
		    break;
                    case 8: /* reduce AFunctionType */
		    {
			ArrayList<Object> list = new8();
			push(goTo(4), list, false);
		    }
		    break;
                    case 9: /* reduce AIntType */
		    {
			ArrayList<Object> list = new9();
			push(goTo(5), list, false);
		    }
		    break;
                    case 10: /* reduce ALongType */
		    {
			ArrayList<Object> list = new10();
			push(goTo(5), list, false);
		    }
		    break;
                    case 11: /* reduce ADoubleType */
		    {
			ArrayList<Object> list = new11();
			push(goTo(5), list, false);
		    }
		    break;
                    case 12: /* reduce AAparameterlist1ParameterList */
		    {
			ArrayList<Object> list = new12();
			push(goTo(6), list, false);
		    }
		    break;
                    case 13: /* reduce AAparameterlist2ParameterList */
		    {
			ArrayList<Object> list = new13();
			push(goTo(6), list, false);
		    }
		    break;
                    case 14: /* reduce AParameter */
		    {
			ArrayList<Object> list = new14();
			push(goTo(7), list, false);
		    }
		    break;
                    case 15: /* reduce ANextParameter */
		    {
			ArrayList<Object> list = new15();
			push(goTo(8), list, false);
		    }
		    break;
                    case 16: /* reduce AAfunctionbody1FunctionBody */
		    {
			ArrayList<Object> list = new16();
			push(goTo(9), list, false);
		    }
		    break;
                    case 17: /* reduce AAfunctionbody2FunctionBody */
		    {
			ArrayList<Object> list = new17();
			push(goTo(9), list, false);
		    }
		    break;
                    case 18: /* reduce AAfunctionbody3FunctionBody */
		    {
			ArrayList<Object> list = new18();
			push(goTo(9), list, false);
		    }
		    break;
                    case 19: /* reduce AAfunctionbody4FunctionBody */
		    {
			ArrayList<Object> list = new19();
			push(goTo(9), list, false);
		    }
		    break;
                    case 20: /* reduce ASimpleStatementStatement */
		    {
			ArrayList<Object> list = new20();
			push(goTo(10), list, false);
		    }
		    break;
                    case 21: /* reduce AIfStatement */
		    {
			ArrayList<Object> list = new21();
			push(goTo(10), list, false);
		    }
		    break;
                    case 22: /* reduce AIfElseStatement */
		    {
			ArrayList<Object> list = new22();
			push(goTo(10), list, false);
		    }
		    break;
                    case 23: /* reduce AWhileStatement */
		    {
			ArrayList<Object> list = new23();
			push(goTo(10), list, false);
		    }
		    break;
                    case 24: /* reduce AForStatement */
		    {
			ArrayList<Object> list = new24();
			push(goTo(10), list, false);
		    }
		    break;
                    case 25: /* reduce ARelationConditionalExpression */
		    {
			ArrayList<Object> list = new25();
			push(goTo(11), list, false);
		    }
		    break;
                    case 26: /* reduce AValueConditionalExpression */
		    {
			ArrayList<Object> list = new26();
			push(goTo(11), list, false);
		    }
		    break;
                    case 27: /* reduce AEqEqRelationOp */
		    {
			ArrayList<Object> list = new27();
			push(goTo(12), list, false);
		    }
		    break;
                    case 28: /* reduce ANotEqRelationOp */
		    {
			ArrayList<Object> list = new28();
			push(goTo(12), list, false);
		    }
		    break;
                    case 29: /* reduce ALtRelationOp */
		    {
			ArrayList<Object> list = new29();
			push(goTo(12), list, false);
		    }
		    break;
                    case 30: /* reduce ALtEqRelationOp */
		    {
			ArrayList<Object> list = new30();
			push(goTo(12), list, false);
		    }
		    break;
                    case 31: /* reduce AGtRelationOp */
		    {
			ArrayList<Object> list = new31();
			push(goTo(12), list, false);
		    }
		    break;
                    case 32: /* reduce AGtEqRelationOp */
		    {
			ArrayList<Object> list = new32();
			push(goTo(12), list, false);
		    }
		    break;
                    case 33: /* reduce ANewVariableSimpleStatement */
		    {
			ArrayList<Object> list = new33();
			push(goTo(13), list, false);
		    }
		    break;
                    case 34: /* reduce AAssignVariableSimpleStatement */
		    {
			ArrayList<Object> list = new34();
			push(goTo(13), list, false);
		    }
		    break;
                    case 35: /* reduce ACallExpressionSimpleStatement */
		    {
			ArrayList<Object> list = new35();
			push(goTo(13), list, false);
		    }
		    break;
                    case 36: /* reduce ANewVariable */
		    {
			ArrayList<Object> list = new36();
			push(goTo(14), list, false);
		    }
		    break;
                    case 37: /* reduce AAssignVariable */
		    {
			ArrayList<Object> list = new37();
			push(goTo(15), list, false);
		    }
		    break;
                    case 38: /* reduce AEqAssignOp */
		    {
			ArrayList<Object> list = new38();
			push(goTo(16), list, false);
		    }
		    break;
                    case 39: /* reduce APlusEqAssignOp */
		    {
			ArrayList<Object> list = new39();
			push(goTo(16), list, false);
		    }
		    break;
                    case 40: /* reduce AMinusEqAssignOp */
		    {
			ArrayList<Object> list = new40();
			push(goTo(16), list, false);
		    }
		    break;
                    case 41: /* reduce AStarEqAssignOp */
		    {
			ArrayList<Object> list = new41();
			push(goTo(16), list, false);
		    }
		    break;
                    case 42: /* reduce ADivEqAssignOp */
		    {
			ArrayList<Object> list = new42();
			push(goTo(16), list, false);
		    }
		    break;
                    case 43: /* reduce AModEqAssignOp */
		    {
			ArrayList<Object> list = new43();
			push(goTo(16), list, false);
		    }
		    break;
                    case 44: /* reduce AUnaryRightHandSide */
		    {
			ArrayList<Object> list = new44();
			push(goTo(17), list, false);
		    }
		    break;
                    case 45: /* reduce ABinaryRightHandSide */
		    {
			ArrayList<Object> list = new45();
			push(goTo(17), list, false);
		    }
		    break;
                    case 46: /* reduce ABinaryExpressionBinaryExpression */
		    {
			ArrayList<Object> list = new46();
			push(goTo(18), list, false);
		    }
		    break;
                    case 47: /* reduce ARelationOpBinaryOp */
		    {
			ArrayList<Object> list = new47();
			push(goTo(19), list, false);
		    }
		    break;
                    case 48: /* reduce AStarBinaryOp */
		    {
			ArrayList<Object> list = new48();
			push(goTo(19), list, false);
		    }
		    break;
                    case 49: /* reduce ADivBinaryOp */
		    {
			ArrayList<Object> list = new49();
			push(goTo(19), list, false);
		    }
		    break;
                    case 50: /* reduce AModBinaryOp */
		    {
			ArrayList<Object> list = new50();
			push(goTo(19), list, false);
		    }
		    break;
                    case 51: /* reduce APlusBinaryOp */
		    {
			ArrayList<Object> list = new51();
			push(goTo(19), list, false);
		    }
		    break;
                    case 52: /* reduce AMinusBinaryOp */
		    {
			ArrayList<Object> list = new52();
			push(goTo(19), list, false);
		    }
		    break;
                    case 53: /* reduce AAmpersandAmpersandBinaryOp */
		    {
			ArrayList<Object> list = new53();
			push(goTo(19), list, false);
		    }
		    break;
                    case 54: /* reduce ABarBarBinaryOp */
		    {
			ArrayList<Object> list = new54();
			push(goTo(19), list, false);
		    }
		    break;
                    case 55: /* reduce AValueUnaryExpression */
		    {
			ArrayList<Object> list = new55();
			push(goTo(20), list, false);
		    }
		    break;
                    case 56: /* reduce ACallUnaryExpression */
		    {
			ArrayList<Object> list = new56();
			push(goTo(20), list, false);
		    }
		    break;
                    case 57: /* reduce AUnaryOpUnaryExpression */
		    {
			ArrayList<Object> list = new57();
			push(goTo(20), list, false);
		    }
		    break;
                    case 58: /* reduce AParUnaryOpUnaryExpression */
		    {
			ArrayList<Object> list = new58();
			push(goTo(20), list, false);
		    }
		    break;
                    case 59: /* reduce AMinusUnaryOp */
		    {
			ArrayList<Object> list = new59();
			push(goTo(21), list, false);
		    }
		    break;
                    case 60: /* reduce AExclMarkUnaryOp */
		    {
			ArrayList<Object> list = new60();
			push(goTo(21), list, false);
		    }
		    break;
                    case 61: /* reduce AAcallexpression1CallExpression */
		    {
			ArrayList<Object> list = new61();
			push(goTo(22), list, false);
		    }
		    break;
                    case 62: /* reduce AAcallexpression2CallExpression */
		    {
			ArrayList<Object> list = new62();
			push(goTo(22), list, false);
		    }
		    break;
                    case 63: /* reduce AAstatementblock1StatementBlock */
		    {
			ArrayList<Object> list = new63();
			push(goTo(23), list, false);
		    }
		    break;
                    case 64: /* reduce AAstatementblock2StatementBlock */
		    {
			ArrayList<Object> list = new64();
			push(goTo(23), list, false);
		    }
		    break;
                    case 65: /* reduce AAstatementblock3StatementBlock */
		    {
			ArrayList<Object> list = new65();
			push(goTo(23), list, false);
		    }
		    break;
                    case 66: /* reduce AAstatementblock4StatementBlock */
		    {
			ArrayList<Object> list = new66();
			push(goTo(23), list, false);
		    }
		    break;
                    case 67: /* reduce AAarglist1ArgList */
		    {
			ArrayList<Object> list = new67();
			push(goTo(24), list, false);
		    }
		    break;
                    case 68: /* reduce AAarglist2ArgList */
		    {
			ArrayList<Object> list = new68();
			push(goTo(24), list, false);
		    }
		    break;
                    case 69: /* reduce AArgListTail */
		    {
			ArrayList<Object> list = new69();
			push(goTo(25), list, false);
		    }
		    break;
                    case 70: /* reduce AReturnStopStatement */
		    {
			ArrayList<Object> list = new70();
			push(goTo(26), list, false);
		    }
		    break;
                    case 71: /* reduce AReturnValueStopStatement */
		    {
			ArrayList<Object> list = new71();
			push(goTo(26), list, false);
		    }
		    break;
                    case 72: /* reduce AReturnParStopStatement */
		    {
			ArrayList<Object> list = new72();
			push(goTo(26), list, false);
		    }
		    break;
                    case 73: /* reduce AIdentifierValue */
		    {
			ArrayList<Object> list = new73();
			push(goTo(27), list, false);
		    }
		    break;
                    case 74: /* reduce AConstantValue */
		    {
			ArrayList<Object> list = new74();
			push(goTo(27), list, false);
		    }
		    break;
                    case 75: /* reduce AStringConstant */
		    {
			ArrayList<Object> list = new75();
			push(goTo(28), list, false);
		    }
		    break;
                    case 76: /* reduce AAintegerconstant1Constant */
		    {
			ArrayList<Object> list = new76();
			push(goTo(28), list, false);
		    }
		    break;
                    case 77: /* reduce AAintegerconstant2Constant */
		    {
			ArrayList<Object> list = new77();
			push(goTo(28), list, false);
		    }
		    break;
                    case 78: /* reduce AAdoubleconstant1Constant */
		    {
			ArrayList<Object> list = new78();
			push(goTo(28), list, false);
		    }
		    break;
                    case 79: /* reduce AAdoubleconstant2Constant */
		    {
			ArrayList<Object> list = new79();
			push(goTo(28), list, false);
		    }
		    break;
                    case 80: /* reduce ATerminal$FunctionOrStatement */
		    {
			ArrayList<Object> list = new80();
			push(goTo(29), list, true);
		    }
		    break;
                    case 81: /* reduce ANonTerminal$FunctionOrStatement */
		    {
			ArrayList<Object> list = new81();
			push(goTo(29), list, true);
		    }
		    break;
                    case 82: /* reduce ATerminal$NextParameter */
		    {
			ArrayList<Object> list = new82();
			push(goTo(30), list, true);
		    }
		    break;
                    case 83: /* reduce ANonTerminal$NextParameter */
		    {
			ArrayList<Object> list = new83();
			push(goTo(30), list, true);
		    }
		    break;
                    case 84: /* reduce ATerminal$Statement */
		    {
			ArrayList<Object> list = new84();
			push(goTo(31), list, true);
		    }
		    break;
                    case 85: /* reduce ANonTerminal$Statement */
		    {
			ArrayList<Object> list = new85();
			push(goTo(31), list, true);
		    }
		    break;
                    case 86: /* reduce ATerminal$ArgListTail */
		    {
			ArrayList<Object> list = new86();
			push(goTo(32), list, true);
		    }
		    break;
                    case 87: /* reduce ANonTerminal$ArgListTail */
		    {
			ArrayList<Object> list = new87();
			push(goTo(32), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pprogramNode1 = new AProgram(listNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogramNode1 = new AProgram(listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AFunctionFunctionOrStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionOrStatement pfunctionorstatementNode1;
        {
            // Block
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pfunctionorstatementNode1 = new AFunctionFunctionOrStatement(pfunctionNode2);
        }
	nodeList.add(pfunctionorstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AStatementFunctionOrStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionOrStatement pfunctionorstatementNode1;
        {
            // Block
        PStatement pstatementNode2;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        pfunctionorstatementNode1 = new AStatementFunctionOrStatement(pstatementNode2);
        }
	nodeList.add(pfunctionorstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PFunctionDeclaration pfunctiondeclarationNode2;
        PFunctionBody pfunctionbodyNode3;
        pfunctiondeclarationNode2 = (PFunctionDeclaration)nodeArrayList1.get(0);
        pfunctionbodyNode3 = (PFunctionBody)nodeArrayList2.get(0);

        pfunctionNode1 = new AFunction(pfunctiondeclarationNode2, pfunctionbodyNode3);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAfunctiondeclaration1FunctionDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDeclaration pfunctiondeclarationNode1;
        {
            // Block
        TFun tfunNode2;
        TIdentifier tidentifierNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        PFunctionType pfunctiontypeNode7;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        pfunctiontypeNode7 = (PFunctionType)nodeArrayList5.get(0);

        pfunctiondeclarationNode1 = new AFunctionDeclaration(tfunNode2, tidentifierNode3, tlparNode4, null, trparNode6, pfunctiontypeNode7);
        }
	nodeList.add(pfunctiondeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAfunctiondeclaration2FunctionDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDeclaration pfunctiondeclarationNode1;
        {
            // Block
        TFun tfunNode2;
        TIdentifier tidentifierNode3;
        TLPar tlparNode4;
        PParameterList pparameterlistNode5;
        TRPar trparNode6;
        PFunctionType pfunctiontypeNode7;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparameterlistNode5 = (PParameterList)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        pfunctiontypeNode7 = (PFunctionType)nodeArrayList6.get(0);

        pfunctiondeclarationNode1 = new AFunctionDeclaration(tfunNode2, tidentifierNode3, tlparNode4, pparameterlistNode5, trparNode6, pfunctiontypeNode7);
        }
	nodeList.add(pfunctiondeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AVoidFunctionType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionType pfunctiontypeNode1;
        {
            // Block
        TVoid tvoidNode2;
        tvoidNode2 = (TVoid)nodeArrayList1.get(0);

        pfunctiontypeNode1 = new AVoidFunctionType(tvoidNode2);
        }
	nodeList.add(pfunctiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AFunctionType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionType pfunctiontypeNode1;
        {
            // Block
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList1.get(0);

        pfunctiontypeNode1 = new AFunctionType(ptypeNode2);
        }
	nodeList.add(pfunctiontypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ALongType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TLong tlongNode2;
        tlongNode2 = (TLong)nodeArrayList1.get(0);

        ptypeNode1 = new ALongType(tlongNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ADoubleType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TDouble tdoubleNode2;
        tdoubleNode2 = (TDouble)nodeArrayList1.get(0);

        ptypeNode1 = new ADoubleType(tdoubleNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAparameterlist1ParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterList pparameterlistNode1;
        {
            // Block
        PParameter pparameterNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pparameterNode2 = (PParameter)nodeArrayList1.get(0);
        {
            // Block
        }

        pparameterlistNode1 = new AParameterList(pparameterNode2, listNode3);
        }
	nodeList.add(pparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAparameterlist2ParameterList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameterList pparameterlistNode1;
        {
            // Block
        PParameter pparameterNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pparameterNode2 = (PParameter)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparameterlistNode1 = new AParameterList(pparameterNode2, listNode4);
        }
	nodeList.add(pparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParameter pparameterNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pparameterNode1 = new AParameter(ptypeNode2, tidentifierNode3);
        }
	nodeList.add(pparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ANextParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNextParameter pnextparameterNode1;
        {
            // Block
        TComma tcommaNode2;
        PParameter pparameterNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pparameterNode3 = (PParameter)nodeArrayList2.get(0);

        pnextparameterNode1 = new ANextParameter(tcommaNode2, pparameterNode3);
        }
	nodeList.add(pnextparameterNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAfunctionbody1FunctionBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionBody pfunctionbodyNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRBrace trbraceNode5;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        }
        trbraceNode5 = (TRBrace)nodeArrayList2.get(0);

        pfunctionbodyNode1 = new AFunctionBody(tlbraceNode2, listNode3, null, trbraceNode5);
        }
	nodeList.add(pfunctionbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAfunctionbody2FunctionBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionBody pfunctionbodyNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRBrace trbraceNode6;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trbraceNode6 = (TRBrace)nodeArrayList3.get(0);

        pfunctionbodyNode1 = new AFunctionBody(tlbraceNode2, listNode4, null, trbraceNode6);
        }
	nodeList.add(pfunctionbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAfunctionbody3FunctionBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionBody pfunctionbodyNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PStopStatement pstopstatementNode4;
        TRBrace trbraceNode5;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        }
        pstopstatementNode4 = (PStopStatement)nodeArrayList2.get(0);
        trbraceNode5 = (TRBrace)nodeArrayList3.get(0);

        pfunctionbodyNode1 = new AFunctionBody(tlbraceNode2, listNode3, pstopstatementNode4, trbraceNode5);
        }
	nodeList.add(pfunctionbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAfunctionbody4FunctionBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionBody pfunctionbodyNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PStopStatement pstopstatementNode5;
        TRBrace trbraceNode6;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pstopstatementNode5 = (PStopStatement)nodeArrayList3.get(0);
        trbraceNode6 = (TRBrace)nodeArrayList4.get(0);

        pfunctionbodyNode1 = new AFunctionBody(tlbraceNode2, listNode4, pstopstatementNode5, trbraceNode6);
        }
	nodeList.add(pfunctionbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ASimpleStatementStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PSimpleStatement psimplestatementNode2;
        TSemicolon tsemicolonNode3;
        psimplestatementNode2 = (PSimpleStatement)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pstatementNode1 = new ASimpleStatementStatement(psimplestatementNode2, tsemicolonNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIf tifNode2;
        PConditionalExpression pconditionalexpressionNode3;
        PStatementBlock pstatementblockNode4;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pconditionalexpressionNode3 = (PConditionalExpression)nodeArrayList2.get(0);
        pstatementblockNode4 = (PStatementBlock)nodeArrayList3.get(0);

        pstatementNode1 = new AIfStatement(tifNode2, pconditionalexpressionNode3, pstatementblockNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AIfElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIf tifNode2;
        PConditionalExpression pconditionalexpressionNode3;
        PStatementBlock pstatementblockNode4;
        TElse telseNode5;
        PStatementBlock pstatementblockNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pconditionalexpressionNode3 = (PConditionalExpression)nodeArrayList2.get(0);
        pstatementblockNode4 = (PStatementBlock)nodeArrayList3.get(0);
        telseNode5 = (TElse)nodeArrayList4.get(0);
        pstatementblockNode6 = (PStatementBlock)nodeArrayList5.get(0);

        pstatementNode1 = new AIfElseStatement(tifNode2, pconditionalexpressionNode3, pstatementblockNode4, telseNode5, pstatementblockNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TWhile twhileNode2;
        PConditionalExpression pconditionalexpressionNode3;
        PStatementBlock pstatementblockNode4;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pconditionalexpressionNode3 = (PConditionalExpression)nodeArrayList2.get(0);
        pstatementblockNode4 = (PStatementBlock)nodeArrayList3.get(0);

        pstatementNode1 = new AWhileStatement(twhileNode2, pconditionalexpressionNode3, pstatementblockNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AForStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TFor tforNode2;
        TIdentifier tidentifierNode3;
        TIn tinNode4;
        PValue pvalueNode5;
        TColon tcolonNode6;
        PValue pvalueNode7;
        PStatementBlock pstatementblockNode8;
        tforNode2 = (TFor)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tinNode4 = (TIn)nodeArrayList3.get(0);
        pvalueNode5 = (PValue)nodeArrayList4.get(0);
        tcolonNode6 = (TColon)nodeArrayList5.get(0);
        pvalueNode7 = (PValue)nodeArrayList6.get(0);
        pstatementblockNode8 = (PStatementBlock)nodeArrayList7.get(0);

        pstatementNode1 = new AForStatement(tforNode2, tidentifierNode3, tinNode4, pvalueNode5, tcolonNode6, pvalueNode7, pstatementblockNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ARelationConditionalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionalExpression pconditionalexpressionNode1;
        {
            // Block
        PValue pvalueNode2;
        PRelationOp prelationopNode3;
        PValue pvalueNode4;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);
        prelationopNode3 = (PRelationOp)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);

        pconditionalexpressionNode1 = new ARelationConditionalExpression(pvalueNode2, prelationopNode3, pvalueNode4);
        }
	nodeList.add(pconditionalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AValueConditionalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionalExpression pconditionalexpressionNode1;
        {
            // Block
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        pconditionalexpressionNode1 = new AValueConditionalExpression(pvalueNode2);
        }
	nodeList.add(pconditionalexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AEqEqRelationOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationOp prelationopNode1;
        {
            // Block
        TEqEq teqeqNode2;
        teqeqNode2 = (TEqEq)nodeArrayList1.get(0);

        prelationopNode1 = new AEqEqRelationOp(teqeqNode2);
        }
	nodeList.add(prelationopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ANotEqRelationOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationOp prelationopNode1;
        {
            // Block
        TNotEq tnoteqNode2;
        tnoteqNode2 = (TNotEq)nodeArrayList1.get(0);

        prelationopNode1 = new ANotEqRelationOp(tnoteqNode2);
        }
	nodeList.add(prelationopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ALtRelationOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationOp prelationopNode1;
        {
            // Block
        TLt tltNode2;
        tltNode2 = (TLt)nodeArrayList1.get(0);

        prelationopNode1 = new ALtRelationOp(tltNode2);
        }
	nodeList.add(prelationopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ALtEqRelationOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationOp prelationopNode1;
        {
            // Block
        TLtEq tlteqNode2;
        tlteqNode2 = (TLtEq)nodeArrayList1.get(0);

        prelationopNode1 = new ALtEqRelationOp(tlteqNode2);
        }
	nodeList.add(prelationopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AGtRelationOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationOp prelationopNode1;
        {
            // Block
        TGt tgtNode2;
        tgtNode2 = (TGt)nodeArrayList1.get(0);

        prelationopNode1 = new AGtRelationOp(tgtNode2);
        }
	nodeList.add(prelationopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AGtEqRelationOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelationOp prelationopNode1;
        {
            // Block
        TGtEq tgteqNode2;
        tgteqNode2 = (TGtEq)nodeArrayList1.get(0);

        prelationopNode1 = new AGtEqRelationOp(tgteqNode2);
        }
	nodeList.add(prelationopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ANewVariableSimpleStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStatement psimplestatementNode1;
        {
            // Block
        PNewVariable pnewvariableNode2;
        pnewvariableNode2 = (PNewVariable)nodeArrayList1.get(0);

        psimplestatementNode1 = new ANewVariableSimpleStatement(pnewvariableNode2);
        }
	nodeList.add(psimplestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAssignVariableSimpleStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStatement psimplestatementNode1;
        {
            // Block
        PAssignVariable passignvariableNode2;
        passignvariableNode2 = (PAssignVariable)nodeArrayList1.get(0);

        psimplestatementNode1 = new AAssignVariableSimpleStatement(passignvariableNode2);
        }
	nodeList.add(psimplestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ACallExpressionSimpleStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStatement psimplestatementNode1;
        {
            // Block
        PCallExpression pcallexpressionNode2;
        pcallexpressionNode2 = (PCallExpression)nodeArrayList1.get(0);

        psimplestatementNode1 = new ACallExpressionSimpleStatement(pcallexpressionNode2);
        }
	nodeList.add(psimplestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ANewVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNewVariable pnewvariableNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        TEq teqNode4;
        PRightHandSide prighthandsideNode5;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        teqNode4 = (TEq)nodeArrayList3.get(0);
        prighthandsideNode5 = (PRightHandSide)nodeArrayList4.get(0);

        pnewvariableNode1 = new ANewVariable(ptypeNode2, tidentifierNode3, teqNode4, prighthandsideNode5);
        }
	nodeList.add(pnewvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAssignVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignVariable passignvariableNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PAssignOp passignopNode3;
        PRightHandSide prighthandsideNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        passignopNode3 = (PAssignOp)nodeArrayList2.get(0);
        prighthandsideNode4 = (PRightHandSide)nodeArrayList3.get(0);

        passignvariableNode1 = new AAssignVariable(tidentifierNode2, passignopNode3, prighthandsideNode4);
        }
	nodeList.add(passignvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AEqAssignOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignOp passignopNode1;
        {
            // Block
        TEq teqNode2;
        teqNode2 = (TEq)nodeArrayList1.get(0);

        passignopNode1 = new AEqAssignOp(teqNode2);
        }
	nodeList.add(passignopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce APlusEqAssignOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignOp passignopNode1;
        {
            // Block
        TPlusEqual tplusequalNode2;
        tplusequalNode2 = (TPlusEqual)nodeArrayList1.get(0);

        passignopNode1 = new APlusEqAssignOp(tplusequalNode2);
        }
	nodeList.add(passignopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AMinusEqAssignOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignOp passignopNode1;
        {
            // Block
        TMinusEqual tminusequalNode2;
        tminusequalNode2 = (TMinusEqual)nodeArrayList1.get(0);

        passignopNode1 = new AMinusEqAssignOp(tminusequalNode2);
        }
	nodeList.add(passignopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AStarEqAssignOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignOp passignopNode1;
        {
            // Block
        TStarEqual tstarequalNode2;
        tstarequalNode2 = (TStarEqual)nodeArrayList1.get(0);

        passignopNode1 = new AStarEqAssignOp(tstarequalNode2);
        }
	nodeList.add(passignopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ADivEqAssignOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignOp passignopNode1;
        {
            // Block
        TDivEqual tdivequalNode2;
        tdivequalNode2 = (TDivEqual)nodeArrayList1.get(0);

        passignopNode1 = new ADivEqAssignOp(tdivequalNode2);
        }
	nodeList.add(passignopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AModEqAssignOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignOp passignopNode1;
        {
            // Block
        TModEqual tmodequalNode2;
        tmodequalNode2 = (TModEqual)nodeArrayList1.get(0);

        passignopNode1 = new AModEqAssignOp(tmodequalNode2);
        }
	nodeList.add(passignopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AUnaryRightHandSide */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRightHandSide prighthandsideNode1;
        {
            // Block
        PUnaryExpression punaryexpressionNode2;
        punaryexpressionNode2 = (PUnaryExpression)nodeArrayList1.get(0);

        prighthandsideNode1 = new AUnaryRightHandSide(punaryexpressionNode2);
        }
	nodeList.add(prighthandsideNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ABinaryRightHandSide */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRightHandSide prighthandsideNode1;
        {
            // Block
        PBinaryExpression pbinaryexpressionNode2;
        pbinaryexpressionNode2 = (PBinaryExpression)nodeArrayList1.get(0);

        prighthandsideNode1 = new ABinaryRightHandSide(pbinaryexpressionNode2);
        }
	nodeList.add(prighthandsideNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ABinaryExpressionBinaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryExpression pbinaryexpressionNode1;
        {
            // Block
        PValue pvalueNode2;
        PBinaryOp pbinaryopNode3;
        PValue pvalueNode4;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);
        pbinaryopNode3 = (PBinaryOp)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);

        pbinaryexpressionNode1 = new ABinaryExpressionBinaryExpression(pvalueNode2, pbinaryopNode3, pvalueNode4);
        }
	nodeList.add(pbinaryexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ARelationOpBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        PRelationOp prelationopNode2;
        prelationopNode2 = (PRelationOp)nodeArrayList1.get(0);

        pbinaryopNode1 = new ARelationOpBinaryOp(prelationopNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AStarBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TStar tstarNode2;
        tstarNode2 = (TStar)nodeArrayList1.get(0);

        pbinaryopNode1 = new AStarBinaryOp(tstarNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ADivBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TDiv tdivNode2;
        tdivNode2 = (TDiv)nodeArrayList1.get(0);

        pbinaryopNode1 = new ADivBinaryOp(tdivNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AModBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TMod tmodNode2;
        tmodNode2 = (TMod)nodeArrayList1.get(0);

        pbinaryopNode1 = new AModBinaryOp(tmodNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce APlusBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        pbinaryopNode1 = new APlusBinaryOp(tplusNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AMinusBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        pbinaryopNode1 = new AMinusBinaryOp(tminusNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAmpersandAmpersandBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TAmpersandAmpersand tampersandampersandNode2;
        tampersandampersandNode2 = (TAmpersandAmpersand)nodeArrayList1.get(0);

        pbinaryopNode1 = new AAmpersandAmpersandBinaryOp(tampersandampersandNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ABarBarBinaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBinaryOp pbinaryopNode1;
        {
            // Block
        TBarBar tbarbarNode2;
        tbarbarNode2 = (TBarBar)nodeArrayList1.get(0);

        pbinaryopNode1 = new ABarBarBinaryOp(tbarbarNode2);
        }
	nodeList.add(pbinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AValueUnaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryExpression punaryexpressionNode1;
        {
            // Block
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        punaryexpressionNode1 = new AValueUnaryExpression(pvalueNode2);
        }
	nodeList.add(punaryexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ACallUnaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryExpression punaryexpressionNode1;
        {
            // Block
        PCallExpression pcallexpressionNode2;
        pcallexpressionNode2 = (PCallExpression)nodeArrayList1.get(0);

        punaryexpressionNode1 = new ACallUnaryExpression(pcallexpressionNode2);
        }
	nodeList.add(punaryexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AUnaryOpUnaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryExpression punaryexpressionNode1;
        {
            // Block
        PUnaryOp punaryopNode2;
        TIdentifier tidentifierNode3;
        punaryopNode2 = (PUnaryOp)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        punaryexpressionNode1 = new AUnaryOpUnaryExpression(punaryopNode2, tidentifierNode3);
        }
	nodeList.add(punaryexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AParUnaryOpUnaryExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryExpression punaryexpressionNode1;
        {
            // Block
        TLPar tlparNode2;
        PUnaryOp punaryopNode3;
        TIdentifier tidentifierNode4;
        TRPar trparNode5;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        punaryopNode3 = (PUnaryOp)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        punaryexpressionNode1 = new AParUnaryOpUnaryExpression(tlparNode2, punaryopNode3, tidentifierNode4, trparNode5);
        }
	nodeList.add(punaryexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AMinusUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        punaryopNode1 = new AMinusUnaryOp(tminusNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AExclMarkUnaryOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnaryOp punaryopNode1;
        {
            // Block
        TExclMark texclmarkNode2;
        texclmarkNode2 = (TExclMark)nodeArrayList1.get(0);

        punaryopNode1 = new AExclMarkUnaryOp(texclmarkNode2);
        }
	nodeList.add(punaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AAcallexpression1CallExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallExpression pcallexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pcallexpressionNode1 = new ACallExpression(tidentifierNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(pcallexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAcallexpression2CallExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallExpression pcallexpressionNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        PArgList parglistNode4;
        TRPar trparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        parglistNode4 = (PArgList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pcallexpressionNode1 = new ACallExpression(tidentifierNode2, tlparNode3, parglistNode4, trparNode5);
        }
	nodeList.add(pcallexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAstatementblock1StatementBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementBlock pstatementblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRBrace trbraceNode5;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        }
        trbraceNode5 = (TRBrace)nodeArrayList2.get(0);

        pstatementblockNode1 = new AStatementBlock(tlbraceNode2, listNode3, null, trbraceNode5);
        }
	nodeList.add(pstatementblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AAstatementblock2StatementBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementBlock pstatementblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRBrace trbraceNode6;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trbraceNode6 = (TRBrace)nodeArrayList3.get(0);

        pstatementblockNode1 = new AStatementBlock(tlbraceNode2, listNode4, null, trbraceNode6);
        }
	nodeList.add(pstatementblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AAstatementblock3StatementBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementBlock pstatementblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PStopStatement pstopstatementNode4;
        TRBrace trbraceNode5;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        }
        pstopstatementNode4 = (PStopStatement)nodeArrayList2.get(0);
        trbraceNode5 = (TRBrace)nodeArrayList3.get(0);

        pstatementblockNode1 = new AStatementBlock(tlbraceNode2, listNode3, pstopstatementNode4, trbraceNode5);
        }
	nodeList.add(pstatementblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AAstatementblock4StatementBlock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementBlock pstatementblockNode1;
        {
            // Block
        TLBrace tlbraceNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PStopStatement pstopstatementNode5;
        TRBrace trbraceNode6;
        tlbraceNode2 = (TLBrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pstopstatementNode5 = (PStopStatement)nodeArrayList3.get(0);
        trbraceNode6 = (TRBrace)nodeArrayList4.get(0);

        pstatementblockNode1 = new AStatementBlock(tlbraceNode2, listNode4, pstopstatementNode5, trbraceNode6);
        }
	nodeList.add(pstatementblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAarglist1ArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgList parglistNode1;
        {
            // Block
        PValue pvalueNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pvalueNode2 = (PValue)nodeArrayList1.get(0);
        {
            // Block
        }

        parglistNode1 = new AArgList(pvalueNode2, listNode3);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAarglist2ArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgList parglistNode1;
        {
            // Block
        PValue pvalueNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pvalueNode2 = (PValue)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        parglistNode1 = new AArgList(pvalueNode2, listNode4);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AArgListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgListTail parglisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        PValue pvalueNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);

        parglisttailNode1 = new AArgListTail(tcommaNode2, pvalueNode3);
        }
	nodeList.add(parglisttailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AReturnStopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        TSemicolon tsemicolonNode3;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pstopstatementNode1 = new AReturnStopStatement(treturnNode2, tsemicolonNode3);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AReturnValueStopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        PValue pvalueNode3;
        TSemicolon tsemicolonNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pstopstatementNode1 = new AReturnValueStopStatement(treturnNode2, pvalueNode3, tsemicolonNode4);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AReturnParStopStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStopStatement pstopstatementNode1;
        {
            // Block
        TReturn treturnNode2;
        TLPar tlparNode3;
        PValue pvalueNode4;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pstopstatementNode1 = new AReturnParStopStatement(treturnNode2, tlparNode3, pvalueNode4, trparNode5, tsemicolonNode6);
        }
	nodeList.add(pstopstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AIdentifierValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvalueNode1 = new AIdentifierValue(tidentifierNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AConstantValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PConstant pconstantNode2;
        pconstantNode2 = (PConstant)nodeArrayList1.get(0);

        pvalueNode1 = new AConstantValue(pconstantNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AStringConstant */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstant pconstantNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pconstantNode1 = new AStringConstant(tstringliteralNode2);
        }
	nodeList.add(pconstantNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AAintegerconstant1Constant */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstant pconstantNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIntegerConstant tintegerconstantNode3;
        tintegerconstantNode3 = (TIntegerConstant)nodeArrayList1.get(0);

        pconstantNode1 = new AIntegerConstant(null, tintegerconstantNode3);
        }
	nodeList.add(pconstantNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AAintegerconstant2Constant */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstant pconstantNode1;
        {
            // Block
        TMinus tminusNode2;
        TIntegerConstant tintegerconstantNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        tintegerconstantNode3 = (TIntegerConstant)nodeArrayList2.get(0);

        pconstantNode1 = new AIntegerConstant(tminusNode2, tintegerconstantNode3);
        }
	nodeList.add(pconstantNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AAdoubleconstant1Constant */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstant pconstantNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TFloatingConstant tfloatingconstantNode3;
        tfloatingconstantNode3 = (TFloatingConstant)nodeArrayList1.get(0);

        pconstantNode1 = new ADoubleConstant(null, tfloatingconstantNode3);
        }
	nodeList.add(pconstantNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AAdoubleconstant2Constant */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstant pconstantNode1;
        {
            // Block
        TMinus tminusNode2;
        TFloatingConstant tfloatingconstantNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        tfloatingconstantNode3 = (TFloatingConstant)nodeArrayList2.get(0);

        pconstantNode1 = new ADoubleConstant(tminusNode2, tfloatingconstantNode3);
        }
	nodeList.add(pconstantNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ATerminal$FunctionOrStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFunctionOrStatement pfunctionorstatementNode1;
        pfunctionorstatementNode1 = (PFunctionOrStatement)nodeArrayList1.get(0);
	if(pfunctionorstatementNode1 != null)
	{
	  listNode2.add(pfunctionorstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ANonTerminal$FunctionOrStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PFunctionOrStatement pfunctionorstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfunctionorstatementNode2 = (PFunctionOrStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfunctionorstatementNode2 != null)
	{
	  listNode3.add(pfunctionorstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ATerminal$NextParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PNextParameter pnextparameterNode1;
        pnextparameterNode1 = (PNextParameter)nodeArrayList1.get(0);
	if(pnextparameterNode1 != null)
	{
	  listNode2.add(pnextparameterNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ANonTerminal$NextParameter */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PNextParameter pnextparameterNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pnextparameterNode2 = (PNextParameter)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pnextparameterNode2 != null)
	{
	  listNode3.add(pnextparameterNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ATerminal$ArgListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArgListTail parglisttailNode1;
        parglisttailNode1 = (PArgListTail)nodeArrayList1.get(0);
	if(parglisttailNode1 != null)
	{
	  listNode2.add(parglisttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ANonTerminal$ArgListTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArgListTail parglisttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parglisttailNode2 = (PArgListTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parglisttailNode2 != null)
	{
	  listNode3.add(parglisttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {32, SHIFT, 1}, {35, SHIFT, 2}, {36, SHIFT, 3}, {41, SHIFT, 4}, {43, SHIFT, 5}, {44, SHIFT, 6}, {45, SHIFT, 7}, {46, SHIFT, 8}, },
			{{-1, ERROR, 1}, {14, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 2}, {14, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 3}, {46, SHIFT, 29}, },
			{{-1, ERROR, 4}, {46, SHIFT, 30}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 8}, {3, SHIFT, 31}, {17, SHIFT, 32}, {26, SHIFT, 33}, {27, SHIFT, 34}, {28, SHIFT, 35}, {29, SHIFT, 36}, {30, SHIFT, 37}, },
			{{-1, ERROR, 9}, {50, ACCEPT, -1}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 12}, {7, SHIFT, 39}, },
			{{-1, ERROR, 13}, {46, SHIFT, 41}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 15}, {2, SHIFT, 42}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 1}, {32, SHIFT, 1}, {35, SHIFT, 2}, {36, SHIFT, 3}, {41, SHIFT, 4}, {43, SHIFT, 5}, {44, SHIFT, 6}, {45, SHIFT, 7}, {46, SHIFT, 8}, },
			{{-1, ERROR, 20}, {47, SHIFT, 44}, {49, SHIFT, 45}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 25}, {7, SHIFT, 46}, },
			{{-1, REDUCE, 26}, {18, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {21, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 28}, {7, SHIFT, 46}, },
			{{-1, ERROR, 29}, {37, SHIFT, 56}, },
			{{-1, ERROR, 30}, {3, SHIFT, 57}, },
			{{-1, ERROR, 31}, {4, SHIFT, 58}, {14, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 38}, {3, SHIFT, 61}, {14, SHIFT, 62}, {15, SHIFT, 63}, {46, SHIFT, 64}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 39}, {8, SHIFT, 71}, {32, SHIFT, 1}, {35, SHIFT, 2}, {36, SHIFT, 3}, {40, SHIFT, 72}, {43, SHIFT, 5}, {44, SHIFT, 6}, {45, SHIFT, 7}, {46, SHIFT, 8}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 41}, {17, SHIFT, 76}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 46}, {8, SHIFT, 77}, {32, SHIFT, 1}, {35, SHIFT, 2}, {36, SHIFT, 3}, {40, SHIFT, 72}, {43, SHIFT, 5}, {44, SHIFT, 6}, {45, SHIFT, 7}, {46, SHIFT, 8}, },
			{{-1, REDUCE, 21}, {33, SHIFT, 80}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 54}, {14, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 56}, {14, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 57}, {4, SHIFT, 83}, {43, SHIFT, 5}, {44, SHIFT, 6}, {45, SHIFT, 7}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 59}, {4, SHIFT, 87}, },
			{{-1, REDUCE, 67}, {0, SHIFT, 88}, },
			{{-1, ERROR, 61}, {14, SHIFT, 91}, {15, SHIFT, 63}, },
			{{-1, REDUCE, 59}, {47, SHIFT, 44}, {49, SHIFT, 45}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 73}, {3, SHIFT, 31}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 68}, {46, SHIFT, 93}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 55}, {9, SHIFT, 94}, {10, SHIFT, 95}, {11, SHIFT, 96}, {13, SHIFT, 97}, {14, SHIFT, 98}, {18, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {21, SHIFT, 51}, {22, SHIFT, 52}, {23, SHIFT, 53}, {24, SHIFT, 99}, {25, SHIFT, 100}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 72}, {2, SHIFT, 103}, {3, SHIFT, 104}, {14, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 74}, {8, SHIFT, 106}, },
			{{-1, ERROR, 75}, {8, SHIFT, 107}, {32, SHIFT, 1}, {35, SHIFT, 2}, {36, SHIFT, 3}, {40, SHIFT, 72}, {43, SHIFT, 5}, {44, SHIFT, 6}, {45, SHIFT, 7}, {46, SHIFT, 8}, },
			{{-1, ERROR, 76}, {3, SHIFT, 61}, {14, SHIFT, 62}, {15, SHIFT, 63}, {46, SHIFT, 64}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 78}, {8, SHIFT, 111}, },
			{{-1, ERROR, 79}, {8, SHIFT, 112}, {32, SHIFT, 1}, {35, SHIFT, 2}, {36, SHIFT, 3}, {40, SHIFT, 72}, {43, SHIFT, 5}, {44, SHIFT, 6}, {45, SHIFT, 7}, {46, SHIFT, 8}, },
			{{-1, ERROR, 80}, {7, SHIFT, 46}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 82}, {1, SHIFT, 115}, },
			{{-1, ERROR, 83}, {42, SHIFT, 116}, {43, SHIFT, 5}, {44, SHIFT, 6}, {45, SHIFT, 7}, },
			{{-1, ERROR, 84}, {46, SHIFT, 119}, },
			{{-1, ERROR, 85}, {4, SHIFT, 120}, },
			{{-1, REDUCE, 12}, {0, SHIFT, 121}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 88}, {14, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 68}, {0, SHIFT, 88}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 92}, {46, SHIFT, 126}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 102}, {14, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 104}, {14, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, ERROR, 105}, {2, SHIFT, 129}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 109}, {8, SHIFT, 130}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 113}, {8, SHIFT, 131}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 115}, {14, SHIFT, 20}, {46, SHIFT, 21}, {47, SHIFT, 22}, {48, SHIFT, 23}, {49, SHIFT, 24}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 120}, {42, SHIFT, 116}, {43, SHIFT, 5}, {44, SHIFT, 6}, {45, SHIFT, 7}, },
			{{-1, ERROR, 121}, {43, SHIFT, 5}, {44, SHIFT, 6}, {45, SHIFT, 7}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 13}, {0, SHIFT, 121}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 126}, {4, SHIFT, 136}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 128}, {4, SHIFT, 137}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 132}, {7, SHIFT, 46}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 137}, {2, SHIFT, 139}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 72}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 9}, },
			{{-1, 10}, {19, 43}, },
			{{-1, 11}, },
			{{-1, 12}, },
			{{-1, 117}, {120, 133}, },
			{{-1, 13}, {57, 84}, {83, 118}, {120, 118}, {121, 84}, },
			{{-1, 85}, },
			{{-1, 86}, {121, 134}, },
			{{-1, 122}, {123, 135}, },
			{{-1, 40}, },
			{{-1, 14}, {39, 73}, {46, 73}, {75, 108}, {79, 108}, },
			{{-1, 25}, {2, 28}, },
			{{-1, 54}, {70, 101}, },
			{{-1, 15}, },
			{{-1, 16}, },
			{{-1, 17}, },
			{{-1, 38}, },
			{{-1, 65}, {76, 110}, },
			{{-1, 66}, },
			{{-1, 102}, },
			{{-1, 67}, },
			{{-1, 68}, {61, 92}, },
			{{-1, 18}, {38, 69}, {76, 69}, },
			{{-1, 47}, {28, 55}, {80, 114}, {132, 138}, },
			{{-1, 59}, },
			{{-1, 89}, {90, 125}, },
			{{-1, 74}, {46, 78}, {75, 109}, {79, 113}, },
			{{-1, 26}, {31, 60}, {38, 70}, {54, 81}, {56, 82}, {72, 105}, {76, 70}, {88, 124}, {102, 127}, {104, 128}, {115, 132}, },
			{{-1, 27}, },
			{{-1, 19}, },
			{{-1, 123}, },
			{{-1, 75}, {46, 79}, },
			{{-1, 90}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'if', 'while', 'for', 'fun', 'int', 'long', 'double', identifier, EOF",
			"expecting: '-', identifier, floating constant, string literal, integer constant",
			"expecting: identifier",
			"expecting: '{', identifier",
			"expecting: '(', '=', '*=', '/=', '%=', '+=', '-='",
			"expecting: EOF",
			"expecting: '{'",
			"expecting: ';'",
			"expecting: floating constant, integer constant",
			"expecting: ',', ':', ';', ')', '{', '==', '!=', '<', '<=', '>', '>='",
			"expecting: ',', ':', ';', ')', '{', '*', '/', '%', '+', '-', '==', '!=', '<', '<=', '>', '>=', '&&', '||'",
			"expecting: '{', '==', '!=', '<', '<=', '>', '>='",
			"expecting: 'in'",
			"expecting: '('",
			"expecting: ')', '-', identifier, floating constant, string literal, integer constant",
			"expecting: '(', '-', '!', identifier, floating constant, string literal, integer constant",
			"expecting: '}', 'if', 'while', 'for', 'return', 'int', 'long', 'double', identifier",
			"expecting: '='",
			"expecting: '}', 'if', 'while', 'for', 'return', 'fun', 'int', 'long', 'double', identifier, EOF",
			"expecting: '}', 'if', 'else', 'while', 'for', 'return', 'fun', 'int', 'long', 'double', identifier, EOF",
			"expecting: ')', 'int', 'long', 'double'",
			"expecting: ')'",
			"expecting: ',', ')'",
			"expecting: '-', '!'",
			"expecting: identifier, floating constant, integer constant",
			"expecting: ';', '(', '*', '/', '%', '+', '-', '==', '!=', '<', '<=', '>', '>=', '&&', '||'",
			"expecting: ';', '*', '/', '%', '+', '-', '==', '!=', '<', '<=', '>', '>=', '&&', '||'",
			"expecting: ';', '(', '-', identifier, floating constant, string literal, integer constant",
			"expecting: '}'",
			"expecting: ':'",
			"expecting: 'void', 'int', 'long', 'double'",
			"expecting: 'int', 'long', 'double'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 2, 3, 3, 3, 4, 5, 0, 0, 6, 2, 0, 7, 7, 7, 7, 0, 8, 9, 10, 10, 10, 6, 11, 10, 6, 12, 13, 14, 15, 15, 15, 15, 15, 15, 15, 16, 0, 17, 18, 0, 10, 10, 16, 19, 1, 1, 1, 1, 1, 1, 1, 18, 1, 20, 7, 21, 22, 23, 24, 2, 25, 7, 7, 7, 2, 7, 26, 0, 27, 16, 28, 16, 15, 19, 28, 16, 6, 6, 29, 30, 2, 21, 22, 7, 1, 22, 22, 2, 2, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 28, 1, 7, 0, 0, 16, 28, 7, 19, 19, 28, 18, 1, 6, 6, 6, 22, 30, 31, 22, 22, 22, 22, 21, 7, 21, 28, 0, 19, 6, 6, 22, 22, 7, 7, 18, 28, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
