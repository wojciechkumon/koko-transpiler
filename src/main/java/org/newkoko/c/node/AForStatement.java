/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.newkoko.c.node;

import org.newkoko.c.analysis.*;

@SuppressWarnings("nls")
public final class AForStatement extends PStatement
{
    private TFor _for_;
    private TIdentifier _identifier_;
    private TIn _in_;
    private PValue _from_;
    private TColon _colon_;
    private PValue _to_;
    private PStatementBlock _statementBlock_;

    public AForStatement()
    {
        // Constructor
    }

    public AForStatement(
        @SuppressWarnings("hiding") TFor _for_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TIn _in_,
        @SuppressWarnings("hiding") PValue _from_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PValue _to_,
        @SuppressWarnings("hiding") PStatementBlock _statementBlock_)
    {
        // Constructor
        setFor(_for_);

        setIdentifier(_identifier_);

        setIn(_in_);

        setFrom(_from_);

        setColon(_colon_);

        setTo(_to_);

        setStatementBlock(_statementBlock_);

    }

    @Override
    public Object clone()
    {
        return new AForStatement(
            cloneNode(this._for_),
            cloneNode(this._identifier_),
            cloneNode(this._in_),
            cloneNode(this._from_),
            cloneNode(this._colon_),
            cloneNode(this._to_),
            cloneNode(this._statementBlock_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAForStatement(this);
    }

    public TFor getFor()
    {
        return this._for_;
    }

    public void setFor(TFor node)
    {
        if(this._for_ != null)
        {
            this._for_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._for_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TIn getIn()
    {
        return this._in_;
    }

    public void setIn(TIn node)
    {
        if(this._in_ != null)
        {
            this._in_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._in_ = node;
    }

    public PValue getFrom()
    {
        return this._from_;
    }

    public void setFrom(PValue node)
    {
        if(this._from_ != null)
        {
            this._from_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._from_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PValue getTo()
    {
        return this._to_;
    }

    public void setTo(PValue node)
    {
        if(this._to_ != null)
        {
            this._to_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._to_ = node;
    }

    public PStatementBlock getStatementBlock()
    {
        return this._statementBlock_;
    }

    public void setStatementBlock(PStatementBlock node)
    {
        if(this._statementBlock_ != null)
        {
            this._statementBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementBlock_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._for_)
            + toString(this._identifier_)
            + toString(this._in_)
            + toString(this._from_)
            + toString(this._colon_)
            + toString(this._to_)
            + toString(this._statementBlock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._for_ == child)
        {
            this._for_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._in_ == child)
        {
            this._in_ = null;
            return;
        }

        if(this._from_ == child)
        {
            this._from_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._to_ == child)
        {
            this._to_ = null;
            return;
        }

        if(this._statementBlock_ == child)
        {
            this._statementBlock_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._for_ == oldChild)
        {
            setFor((TFor) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._in_ == oldChild)
        {
            setIn((TIn) newChild);
            return;
        }

        if(this._from_ == oldChild)
        {
            setFrom((PValue) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._to_ == oldChild)
        {
            setTo((PValue) newChild);
            return;
        }

        if(this._statementBlock_ == oldChild)
        {
            setStatementBlock((PStatementBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
