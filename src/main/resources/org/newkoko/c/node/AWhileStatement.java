/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.newkoko.c.node;

import org.newkoko.c.analysis.*;

@SuppressWarnings("nls")
public final class AWhileStatement extends PStatement
{
    private TWhile _while_;
    private PConditionalExpression _conditionalExpression_;
    private PStatementBlock _statementBlock_;

    public AWhileStatement()
    {
        // Constructor
    }

    public AWhileStatement(
        @SuppressWarnings("hiding") TWhile _while_,
        @SuppressWarnings("hiding") PConditionalExpression _conditionalExpression_,
        @SuppressWarnings("hiding") PStatementBlock _statementBlock_)
    {
        // Constructor
        setWhile(_while_);

        setConditionalExpression(_conditionalExpression_);

        setStatementBlock(_statementBlock_);

    }

    @Override
    public Object clone()
    {
        return new AWhileStatement(
            cloneNode(this._while_),
            cloneNode(this._conditionalExpression_),
            cloneNode(this._statementBlock_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWhileStatement(this);
    }

    public TWhile getWhile()
    {
        return this._while_;
    }

    public void setWhile(TWhile node)
    {
        if(this._while_ != null)
        {
            this._while_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._while_ = node;
    }

    public PConditionalExpression getConditionalExpression()
    {
        return this._conditionalExpression_;
    }

    public void setConditionalExpression(PConditionalExpression node)
    {
        if(this._conditionalExpression_ != null)
        {
            this._conditionalExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalExpression_ = node;
    }

    public PStatementBlock getStatementBlock()
    {
        return this._statementBlock_;
    }

    public void setStatementBlock(PStatementBlock node)
    {
        if(this._statementBlock_ != null)
        {
            this._statementBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementBlock_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._while_)
            + toString(this._conditionalExpression_)
            + toString(this._statementBlock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._while_ == child)
        {
            this._while_ = null;
            return;
        }

        if(this._conditionalExpression_ == child)
        {
            this._conditionalExpression_ = null;
            return;
        }

        if(this._statementBlock_ == child)
        {
            this._statementBlock_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._while_ == oldChild)
        {
            setWhile((TWhile) newChild);
            return;
        }

        if(this._conditionalExpression_ == oldChild)
        {
            setConditionalExpression((PConditionalExpression) newChild);
            return;
        }

        if(this._statementBlock_ == oldChild)
        {
            setStatementBlock((PStatementBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
