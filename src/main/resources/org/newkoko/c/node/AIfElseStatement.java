/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.newkoko.c.node;

import org.newkoko.c.analysis.*;

@SuppressWarnings("nls")
public final class AIfElseStatement extends PStatement
{
    private TIf _if_;
    private PConditionalExpression _conditionalExpression_;
    private PStatementBlock _ifBlock_;
    private TElse _else_;
    private PStatementBlock _elseBlock_;

    public AIfElseStatement()
    {
        // Constructor
    }

    public AIfElseStatement(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PConditionalExpression _conditionalExpression_,
        @SuppressWarnings("hiding") PStatementBlock _ifBlock_,
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") PStatementBlock _elseBlock_)
    {
        // Constructor
        setIf(_if_);

        setConditionalExpression(_conditionalExpression_);

        setIfBlock(_ifBlock_);

        setElse(_else_);

        setElseBlock(_elseBlock_);

    }

    @Override
    public Object clone()
    {
        return new AIfElseStatement(
            cloneNode(this._if_),
            cloneNode(this._conditionalExpression_),
            cloneNode(this._ifBlock_),
            cloneNode(this._else_),
            cloneNode(this._elseBlock_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfElseStatement(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PConditionalExpression getConditionalExpression()
    {
        return this._conditionalExpression_;
    }

    public void setConditionalExpression(PConditionalExpression node)
    {
        if(this._conditionalExpression_ != null)
        {
            this._conditionalExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._conditionalExpression_ = node;
    }

    public PStatementBlock getIfBlock()
    {
        return this._ifBlock_;
    }

    public void setIfBlock(PStatementBlock node)
    {
        if(this._ifBlock_ != null)
        {
            this._ifBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifBlock_ = node;
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public PStatementBlock getElseBlock()
    {
        return this._elseBlock_;
    }

    public void setElseBlock(PStatementBlock node)
    {
        if(this._elseBlock_ != null)
        {
            this._elseBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseBlock_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._conditionalExpression_)
            + toString(this._ifBlock_)
            + toString(this._else_)
            + toString(this._elseBlock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._conditionalExpression_ == child)
        {
            this._conditionalExpression_ = null;
            return;
        }

        if(this._ifBlock_ == child)
        {
            this._ifBlock_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._elseBlock_ == child)
        {
            this._elseBlock_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._conditionalExpression_ == oldChild)
        {
            setConditionalExpression((PConditionalExpression) newChild);
            return;
        }

        if(this._ifBlock_ == oldChild)
        {
            setIfBlock((PStatementBlock) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._elseBlock_ == oldChild)
        {
            setElseBlock((PStatementBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
