/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.newkoko.c.analysis;

import java.util.*;
import org.newkoko.c.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PFunctionOrStatement> copy = new ArrayList<PFunctionOrStatement>(node.getFunctionOrStatement());
            for(PFunctionOrStatement e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inAFunctionFunctionOrStatement(AFunctionFunctionOrStatement node)
    {
        defaultIn(node);
    }

    public void outAFunctionFunctionOrStatement(AFunctionFunctionOrStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionFunctionOrStatement(AFunctionFunctionOrStatement node)
    {
        inAFunctionFunctionOrStatement(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionFunctionOrStatement(node);
    }

    public void inAStatementFunctionOrStatement(AStatementFunctionOrStatement node)
    {
        defaultIn(node);
    }

    public void outAStatementFunctionOrStatement(AStatementFunctionOrStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementFunctionOrStatement(AStatementFunctionOrStatement node)
    {
        inAStatementFunctionOrStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementFunctionOrStatement(node);
    }

    public void inAFunction(AFunction node)
    {
        defaultIn(node);
    }

    public void outAFunction(AFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunction(AFunction node)
    {
        inAFunction(node);
        if(node.getFunctionDeclaration() != null)
        {
            node.getFunctionDeclaration().apply(this);
        }
        if(node.getFunctionBody() != null)
        {
            node.getFunctionBody().apply(this);
        }
        outAFunction(node);
    }

    public void inAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDeclaration(AFunctionDeclaration node)
    {
        inAFunctionDeclaration(node);
        if(node.getFun() != null)
        {
            node.getFun().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getParameterList() != null)
        {
            node.getParameterList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFunctionType() != null)
        {
            node.getFunctionType().apply(this);
        }
        outAFunctionDeclaration(node);
    }

    public void inAVoidFunctionType(AVoidFunctionType node)
    {
        defaultIn(node);
    }

    public void outAVoidFunctionType(AVoidFunctionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVoidFunctionType(AVoidFunctionType node)
    {
        inAVoidFunctionType(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVoidFunctionType(node);
    }

    public void inAFunctionType(AFunctionType node)
    {
        defaultIn(node);
    }

    public void outAFunctionType(AFunctionType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionType(AFunctionType node)
    {
        inAFunctionType(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAFunctionType(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inALongType(ALongType node)
    {
        defaultIn(node);
    }

    public void outALongType(ALongType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALongType(ALongType node)
    {
        inALongType(node);
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        outALongType(node);
    }

    public void inADoubleType(ADoubleType node)
    {
        defaultIn(node);
    }

    public void outADoubleType(ADoubleType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleType(ADoubleType node)
    {
        inADoubleType(node);
        if(node.getDouble() != null)
        {
            node.getDouble().apply(this);
        }
        outADoubleType(node);
    }

    public void inAParameterList(AParameterList node)
    {
        defaultIn(node);
    }

    public void outAParameterList(AParameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterList(AParameterList node)
    {
        inAParameterList(node);
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        {
            List<PNextParameter> copy = new ArrayList<PNextParameter>(node.getNextParameter());
            for(PNextParameter e : copy)
            {
                e.apply(this);
            }
        }
        outAParameterList(node);
    }

    public void inAParameter(AParameter node)
    {
        defaultIn(node);
    }

    public void outAParameter(AParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameter(AParameter node)
    {
        inAParameter(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAParameter(node);
    }

    public void inANextParameter(ANextParameter node)
    {
        defaultIn(node);
    }

    public void outANextParameter(ANextParameter node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANextParameter(ANextParameter node)
    {
        inANextParameter(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getParameter() != null)
        {
            node.getParameter().apply(this);
        }
        outANextParameter(node);
    }

    public void inAFunctionBody(AFunctionBody node)
    {
        defaultIn(node);
    }

    public void outAFunctionBody(AFunctionBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionBody(AFunctionBody node)
    {
        inAFunctionBody(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAFunctionBody(node);
    }

    public void inASimpleStatementStatement(ASimpleStatementStatement node)
    {
        defaultIn(node);
    }

    public void outASimpleStatementStatement(ASimpleStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleStatementStatement(ASimpleStatementStatement node)
    {
        inASimpleStatementStatement(node);
        if(node.getSimpleStatement() != null)
        {
            node.getSimpleStatement().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASimpleStatementStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        if(node.getStatementBlock() != null)
        {
            node.getStatementBlock().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAIfElseStatement(AIfElseStatement node)
    {
        defaultIn(node);
    }

    public void outAIfElseStatement(AIfElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseStatement(AIfElseStatement node)
    {
        inAIfElseStatement(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        if(node.getIfBlock() != null)
        {
            node.getIfBlock().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getElseBlock() != null)
        {
            node.getElseBlock().apply(this);
        }
        outAIfElseStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getConditionalExpression() != null)
        {
            node.getConditionalExpression().apply(this);
        }
        if(node.getStatementBlock() != null)
        {
            node.getStatementBlock().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAForStatement(AForStatement node)
    {
        defaultIn(node);
    }

    public void outAForStatement(AForStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStatement(AForStatement node)
    {
        inAForStatement(node);
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getStatementBlock() != null)
        {
            node.getStatementBlock().apply(this);
        }
        outAForStatement(node);
    }

    public void inARelationConditionalExpression(ARelationConditionalExpression node)
    {
        defaultIn(node);
    }

    public void outARelationConditionalExpression(ARelationConditionalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelationConditionalExpression(ARelationConditionalExpression node)
    {
        inARelationConditionalExpression(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRelationOp() != null)
        {
            node.getRelationOp().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outARelationConditionalExpression(node);
    }

    public void inAValueConditionalExpression(AValueConditionalExpression node)
    {
        defaultIn(node);
    }

    public void outAValueConditionalExpression(AValueConditionalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueConditionalExpression(AValueConditionalExpression node)
    {
        inAValueConditionalExpression(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueConditionalExpression(node);
    }

    public void inAEqEqRelationOp(AEqEqRelationOp node)
    {
        defaultIn(node);
    }

    public void outAEqEqRelationOp(AEqEqRelationOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqEqRelationOp(AEqEqRelationOp node)
    {
        inAEqEqRelationOp(node);
        if(node.getEqEq() != null)
        {
            node.getEqEq().apply(this);
        }
        outAEqEqRelationOp(node);
    }

    public void inANotEqRelationOp(ANotEqRelationOp node)
    {
        defaultIn(node);
    }

    public void outANotEqRelationOp(ANotEqRelationOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqRelationOp(ANotEqRelationOp node)
    {
        inANotEqRelationOp(node);
        if(node.getNotEq() != null)
        {
            node.getNotEq().apply(this);
        }
        outANotEqRelationOp(node);
    }

    public void inALtRelationOp(ALtRelationOp node)
    {
        defaultIn(node);
    }

    public void outALtRelationOp(ALtRelationOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtRelationOp(ALtRelationOp node)
    {
        inALtRelationOp(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtRelationOp(node);
    }

    public void inALtEqRelationOp(ALtEqRelationOp node)
    {
        defaultIn(node);
    }

    public void outALtEqRelationOp(ALtEqRelationOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtEqRelationOp(ALtEqRelationOp node)
    {
        inALtEqRelationOp(node);
        if(node.getLtEq() != null)
        {
            node.getLtEq().apply(this);
        }
        outALtEqRelationOp(node);
    }

    public void inAGtRelationOp(AGtRelationOp node)
    {
        defaultIn(node);
    }

    public void outAGtRelationOp(AGtRelationOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtRelationOp(AGtRelationOp node)
    {
        inAGtRelationOp(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtRelationOp(node);
    }

    public void inAGtEqRelationOp(AGtEqRelationOp node)
    {
        defaultIn(node);
    }

    public void outAGtEqRelationOp(AGtEqRelationOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtEqRelationOp(AGtEqRelationOp node)
    {
        inAGtEqRelationOp(node);
        if(node.getGtEq() != null)
        {
            node.getGtEq().apply(this);
        }
        outAGtEqRelationOp(node);
    }

    public void inANewVariableSimpleStatement(ANewVariableSimpleStatement node)
    {
        defaultIn(node);
    }

    public void outANewVariableSimpleStatement(ANewVariableSimpleStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewVariableSimpleStatement(ANewVariableSimpleStatement node)
    {
        inANewVariableSimpleStatement(node);
        if(node.getNewVariable() != null)
        {
            node.getNewVariable().apply(this);
        }
        outANewVariableSimpleStatement(node);
    }

    public void inAAssignVariableSimpleStatement(AAssignVariableSimpleStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignVariableSimpleStatement(AAssignVariableSimpleStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignVariableSimpleStatement(AAssignVariableSimpleStatement node)
    {
        inAAssignVariableSimpleStatement(node);
        if(node.getAssignVariable() != null)
        {
            node.getAssignVariable().apply(this);
        }
        outAAssignVariableSimpleStatement(node);
    }

    public void inACallExpressionSimpleStatement(ACallExpressionSimpleStatement node)
    {
        defaultIn(node);
    }

    public void outACallExpressionSimpleStatement(ACallExpressionSimpleStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallExpressionSimpleStatement(ACallExpressionSimpleStatement node)
    {
        inACallExpressionSimpleStatement(node);
        if(node.getCallExpression() != null)
        {
            node.getCallExpression().apply(this);
        }
        outACallExpressionSimpleStatement(node);
    }

    public void inANewVariable(ANewVariable node)
    {
        defaultIn(node);
    }

    public void outANewVariable(ANewVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewVariable(ANewVariable node)
    {
        inANewVariable(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getRightHandSide() != null)
        {
            node.getRightHandSide().apply(this);
        }
        outANewVariable(node);
    }

    public void inAAssignVariable(AAssignVariable node)
    {
        defaultIn(node);
    }

    public void outAAssignVariable(AAssignVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignVariable(AAssignVariable node)
    {
        inAAssignVariable(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssignOp() != null)
        {
            node.getAssignOp().apply(this);
        }
        if(node.getRightHandSide() != null)
        {
            node.getRightHandSide().apply(this);
        }
        outAAssignVariable(node);
    }

    public void inAEqAssignOp(AEqAssignOp node)
    {
        defaultIn(node);
    }

    public void outAEqAssignOp(AEqAssignOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqAssignOp(AEqAssignOp node)
    {
        inAEqAssignOp(node);
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        outAEqAssignOp(node);
    }

    public void inAPlusEqAssignOp(APlusEqAssignOp node)
    {
        defaultIn(node);
    }

    public void outAPlusEqAssignOp(APlusEqAssignOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusEqAssignOp(APlusEqAssignOp node)
    {
        inAPlusEqAssignOp(node);
        if(node.getPlusEqual() != null)
        {
            node.getPlusEqual().apply(this);
        }
        outAPlusEqAssignOp(node);
    }

    public void inAMinusEqAssignOp(AMinusEqAssignOp node)
    {
        defaultIn(node);
    }

    public void outAMinusEqAssignOp(AMinusEqAssignOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusEqAssignOp(AMinusEqAssignOp node)
    {
        inAMinusEqAssignOp(node);
        if(node.getMinusEqual() != null)
        {
            node.getMinusEqual().apply(this);
        }
        outAMinusEqAssignOp(node);
    }

    public void inAStarEqAssignOp(AStarEqAssignOp node)
    {
        defaultIn(node);
    }

    public void outAStarEqAssignOp(AStarEqAssignOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarEqAssignOp(AStarEqAssignOp node)
    {
        inAStarEqAssignOp(node);
        if(node.getStarEqual() != null)
        {
            node.getStarEqual().apply(this);
        }
        outAStarEqAssignOp(node);
    }

    public void inADivEqAssignOp(ADivEqAssignOp node)
    {
        defaultIn(node);
    }

    public void outADivEqAssignOp(ADivEqAssignOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivEqAssignOp(ADivEqAssignOp node)
    {
        inADivEqAssignOp(node);
        if(node.getDivEqual() != null)
        {
            node.getDivEqual().apply(this);
        }
        outADivEqAssignOp(node);
    }

    public void inAModEqAssignOp(AModEqAssignOp node)
    {
        defaultIn(node);
    }

    public void outAModEqAssignOp(AModEqAssignOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModEqAssignOp(AModEqAssignOp node)
    {
        inAModEqAssignOp(node);
        if(node.getModEqual() != null)
        {
            node.getModEqual().apply(this);
        }
        outAModEqAssignOp(node);
    }

    public void inAUnaryRightHandSide(AUnaryRightHandSide node)
    {
        defaultIn(node);
    }

    public void outAUnaryRightHandSide(AUnaryRightHandSide node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryRightHandSide(AUnaryRightHandSide node)
    {
        inAUnaryRightHandSide(node);
        if(node.getUnaryExpression() != null)
        {
            node.getUnaryExpression().apply(this);
        }
        outAUnaryRightHandSide(node);
    }

    public void inABinaryRightHandSide(ABinaryRightHandSide node)
    {
        defaultIn(node);
    }

    public void outABinaryRightHandSide(ABinaryRightHandSide node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryRightHandSide(ABinaryRightHandSide node)
    {
        inABinaryRightHandSide(node);
        if(node.getBinaryExpression() != null)
        {
            node.getBinaryExpression().apply(this);
        }
        outABinaryRightHandSide(node);
    }

    public void inABinaryExpressionBinaryExpression(ABinaryExpressionBinaryExpression node)
    {
        defaultIn(node);
    }

    public void outABinaryExpressionBinaryExpression(ABinaryExpressionBinaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryExpressionBinaryExpression(ABinaryExpressionBinaryExpression node)
    {
        inABinaryExpressionBinaryExpression(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        if(node.getBinaryOp() != null)
        {
            node.getBinaryOp().apply(this);
        }
        if(node.getRValue() != null)
        {
            node.getRValue().apply(this);
        }
        outABinaryExpressionBinaryExpression(node);
    }

    public void inARelationOpBinaryOp(ARelationOpBinaryOp node)
    {
        defaultIn(node);
    }

    public void outARelationOpBinaryOp(ARelationOpBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelationOpBinaryOp(ARelationOpBinaryOp node)
    {
        inARelationOpBinaryOp(node);
        if(node.getRelationOp() != null)
        {
            node.getRelationOp().apply(this);
        }
        outARelationOpBinaryOp(node);
    }

    public void inAStarBinaryOp(AStarBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAStarBinaryOp(AStarBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarBinaryOp(AStarBinaryOp node)
    {
        inAStarBinaryOp(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAStarBinaryOp(node);
    }

    public void inADivBinaryOp(ADivBinaryOp node)
    {
        defaultIn(node);
    }

    public void outADivBinaryOp(ADivBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivBinaryOp(ADivBinaryOp node)
    {
        inADivBinaryOp(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivBinaryOp(node);
    }

    public void inAModBinaryOp(AModBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAModBinaryOp(AModBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModBinaryOp(AModBinaryOp node)
    {
        inAModBinaryOp(node);
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        outAModBinaryOp(node);
    }

    public void inAPlusBinaryOp(APlusBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAPlusBinaryOp(APlusBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusBinaryOp(APlusBinaryOp node)
    {
        inAPlusBinaryOp(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusBinaryOp(node);
    }

    public void inAMinusBinaryOp(AMinusBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMinusBinaryOp(AMinusBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusBinaryOp(AMinusBinaryOp node)
    {
        inAMinusBinaryOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusBinaryOp(node);
    }

    public void inAAmpersandAmpersandBinaryOp(AAmpersandAmpersandBinaryOp node)
    {
        defaultIn(node);
    }

    public void outAAmpersandAmpersandBinaryOp(AAmpersandAmpersandBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAmpersandAmpersandBinaryOp(AAmpersandAmpersandBinaryOp node)
    {
        inAAmpersandAmpersandBinaryOp(node);
        if(node.getAmpersandAmpersand() != null)
        {
            node.getAmpersandAmpersand().apply(this);
        }
        outAAmpersandAmpersandBinaryOp(node);
    }

    public void inABarBarBinaryOp(ABarBarBinaryOp node)
    {
        defaultIn(node);
    }

    public void outABarBarBinaryOp(ABarBarBinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABarBarBinaryOp(ABarBarBinaryOp node)
    {
        inABarBarBinaryOp(node);
        if(node.getBarBar() != null)
        {
            node.getBarBar().apply(this);
        }
        outABarBarBinaryOp(node);
    }

    public void inAValueUnaryExpression(AValueUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAValueUnaryExpression(AValueUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueUnaryExpression(AValueUnaryExpression node)
    {
        inAValueUnaryExpression(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueUnaryExpression(node);
    }

    public void inACallUnaryExpression(ACallUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outACallUnaryExpression(ACallUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallUnaryExpression(ACallUnaryExpression node)
    {
        inACallUnaryExpression(node);
        if(node.getCallExpression() != null)
        {
            node.getCallExpression().apply(this);
        }
        outACallUnaryExpression(node);
    }

    public void inAUnaryOpUnaryExpression(AUnaryOpUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAUnaryOpUnaryExpression(AUnaryOpUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryOpUnaryExpression(AUnaryOpUnaryExpression node)
    {
        inAUnaryOpUnaryExpression(node);
        if(node.getUnaryOp() != null)
        {
            node.getUnaryOp().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAUnaryOpUnaryExpression(node);
    }

    public void inAParUnaryOpUnaryExpression(AParUnaryOpUnaryExpression node)
    {
        defaultIn(node);
    }

    public void outAParUnaryOpUnaryExpression(AParUnaryOpUnaryExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParUnaryOpUnaryExpression(AParUnaryOpUnaryExpression node)
    {
        inAParUnaryOpUnaryExpression(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getUnaryOp() != null)
        {
            node.getUnaryOp().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParUnaryOpUnaryExpression(node);
    }

    public void inAMinusUnaryOp(AMinusUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAMinusUnaryOp(AMinusUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusUnaryOp(AMinusUnaryOp node)
    {
        inAMinusUnaryOp(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusUnaryOp(node);
    }

    public void inAExclMarkUnaryOp(AExclMarkUnaryOp node)
    {
        defaultIn(node);
    }

    public void outAExclMarkUnaryOp(AExclMarkUnaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExclMarkUnaryOp(AExclMarkUnaryOp node)
    {
        inAExclMarkUnaryOp(node);
        if(node.getExclMark() != null)
        {
            node.getExclMark().apply(this);
        }
        outAExclMarkUnaryOp(node);
    }

    public void inACallExpression(ACallExpression node)
    {
        defaultIn(node);
    }

    public void outACallExpression(ACallExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallExpression(ACallExpression node)
    {
        inACallExpression(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getArgList() != null)
        {
            node.getArgList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outACallExpression(node);
    }

    public void inAStatementBlock(AStatementBlock node)
    {
        defaultIn(node);
    }

    public void outAStatementBlock(AStatementBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementBlock(AStatementBlock node)
    {
        inAStatementBlock(node);
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStopStatement() != null)
        {
            node.getStopStatement().apply(this);
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAStatementBlock(node);
    }

    public void inAArgList(AArgList node)
    {
        defaultIn(node);
    }

    public void outAArgList(AArgList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgList(AArgList node)
    {
        inAArgList(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        {
            List<PArgListTail> copy = new ArrayList<PArgListTail>(node.getArgListTail());
            for(PArgListTail e : copy)
            {
                e.apply(this);
            }
        }
        outAArgList(node);
    }

    public void inAArgListTail(AArgListTail node)
    {
        defaultIn(node);
    }

    public void outAArgListTail(AArgListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgListTail(AArgListTail node)
    {
        inAArgListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAArgListTail(node);
    }

    public void inAReturnStopStatement(AReturnStopStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnStopStatement(AReturnStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnStopStatement(AReturnStopStatement node)
    {
        inAReturnStopStatement(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAReturnStopStatement(node);
    }

    public void inAReturnValueStopStatement(AReturnValueStopStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnValueStopStatement(AReturnValueStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnValueStopStatement(AReturnValueStopStatement node)
    {
        inAReturnValueStopStatement(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAReturnValueStopStatement(node);
    }

    public void inAReturnParStopStatement(AReturnParStopStatement node)
    {
        defaultIn(node);
    }

    public void outAReturnParStopStatement(AReturnParStopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnParStopStatement(AReturnParStopStatement node)
    {
        inAReturnParStopStatement(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAReturnParStopStatement(node);
    }

    public void inAIdentifierValue(AIdentifierValue node)
    {
        defaultIn(node);
    }

    public void outAIdentifierValue(AIdentifierValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierValue(AIdentifierValue node)
    {
        inAIdentifierValue(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierValue(node);
    }

    public void inAConstantValue(AConstantValue node)
    {
        defaultIn(node);
    }

    public void outAConstantValue(AConstantValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstantValue(AConstantValue node)
    {
        inAConstantValue(node);
        if(node.getConstant() != null)
        {
            node.getConstant().apply(this);
        }
        outAConstantValue(node);
    }

    public void inAStringConstant(AStringConstant node)
    {
        defaultIn(node);
    }

    public void outAStringConstant(AStringConstant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringConstant(AStringConstant node)
    {
        inAStringConstant(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringConstant(node);
    }

    public void inAIntegerConstant(AIntegerConstant node)
    {
        defaultIn(node);
    }

    public void outAIntegerConstant(AIntegerConstant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerConstant(AIntegerConstant node)
    {
        inAIntegerConstant(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getIntegerConstant() != null)
        {
            node.getIntegerConstant().apply(this);
        }
        outAIntegerConstant(node);
    }

    public void inADoubleConstant(ADoubleConstant node)
    {
        defaultIn(node);
    }

    public void outADoubleConstant(ADoubleConstant node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleConstant(ADoubleConstant node)
    {
        inADoubleConstant(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getFloatingConstant() != null)
        {
            node.getFloatingConstant().apply(this);
        }
        outADoubleConstant(node);
    }
}
