/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.koko.parser;

import org.koko.lexer.*;
import org.koko.node.*;
import org.koko.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAprogram1Program */
		    {
			ArrayList<Object> list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAprogram2Program */
		    {
			ArrayList<Object> list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce AListExprList */
		    {
			ArrayList<Object> list = new2();
			push(goTo(1), list);
		    }
		    break;
                    case 3: /* reduce ASingleExprList */
		    {
			ArrayList<Object> list = new3();
			push(goTo(1), list);
		    }
		    break;
                    case 4: /* reduce AListPureExprList */
		    {
			ArrayList<Object> list = new4();
			push(goTo(2), list);
		    }
		    break;
                    case 5: /* reduce ASinglePureExprList */
		    {
			ArrayList<Object> list = new5();
			push(goTo(2), list);
		    }
		    break;
                    case 6: /* reduce ABindExpr */
		    {
			ArrayList<Object> list = new6();
			push(goTo(3), list);
		    }
		    break;
                    case 7: /* reduce APureExpr */
		    {
			ArrayList<Object> list = new7();
			push(goTo(3), list);
		    }
		    break;
                    case 8: /* reduce AFundefBindExpr */
		    {
			ArrayList<Object> list = new8();
			push(goTo(4), list);
		    }
		    break;
                    case 9: /* reduce AAfundeffunctiondefinition1FunctionDefinition */
		    {
			ArrayList<Object> list = new9();
			push(goTo(5), list);
		    }
		    break;
                    case 10: /* reduce AAfundeffunctiondefinition2FunctionDefinition */
		    {
			ArrayList<Object> list = new10();
			push(goTo(5), list);
		    }
		    break;
                    case 11: /* reduce AAlistArgDeclList */
		    {
			ArrayList<Object> list = new11();
			push(goTo(6), list);
		    }
		    break;
                    case 12: /* reduce AAsingleArgDeclList */
		    {
			ArrayList<Object> list = new12();
			push(goTo(6), list);
		    }
		    break;
                    case 13: /* reduce AFuncArg */
		    {
			ArrayList<Object> list = new13();
			push(goTo(7), list);
		    }
		    break;
                    case 14: /* reduce ACmpPureExpr */
		    {
			ArrayList<Object> list = new14();
			push(goTo(8), list);
		    }
		    break;
                    case 15: /* reduce AAtomPureExpr */
		    {
			ArrayList<Object> list = new15();
			push(goTo(8), list);
		    }
		    break;
                    case 16: /* reduce AAcondatompureexpr1AtomPureExpr */
		    {
			ArrayList<Object> list = new16();
			push(goTo(9), list);
		    }
		    break;
                    case 17: /* reduce AAcondatompureexpr2AtomPureExpr */
		    {
			ArrayList<Object> list = new17();
			push(goTo(9), list);
		    }
		    break;
                    case 18: /* reduce AAcondatompureexpr3AtomPureExpr */
		    {
			ArrayList<Object> list = new18();
			push(goTo(9), list);
		    }
		    break;
                    case 19: /* reduce AAcondatompureexpr4AtomPureExpr */
		    {
			ArrayList<Object> list = new19();
			push(goTo(9), list);
		    }
		    break;
                    case 20: /* reduce ANumberAtomPureExpr */
		    {
			ArrayList<Object> list = new20();
			push(goTo(9), list);
		    }
		    break;
                    case 21: /* reduce AVarAtomPureExpr */
		    {
			ArrayList<Object> list = new21();
			push(goTo(9), list);
		    }
		    break;
                    case 22: /* reduce ASeparator */
		    {
			ArrayList<Object> list = new22();
			push(goTo(10), list);
		    }
		    break;
                    case 23: /* reduce AListSep */
		    {
			ArrayList<Object> list = new23();
			push(goTo(11), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogramNode1 = new AProgram(listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogramNode1 = new AProgram(listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AListExprList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpr pexprNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexprNode2 = (PExpr)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexprNode2 != null)
	{
	  listNode3.add(pexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ASingleExprList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AListPureExprList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PPureExpr ppureexprNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ppureexprNode2 = (PPureExpr)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ppureexprNode2 != null)
	{
	  listNode3.add(ppureexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ASinglePureExprList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PPureExpr ppureexprNode1;
        ppureexprNode1 = (PPureExpr)nodeArrayList1.get(0);
	if(ppureexprNode1 != null)
	{
	  listNode2.add(ppureexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ABindExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PBindExpr pbindexprNode2;
        pbindexprNode2 = (PBindExpr)nodeArrayList1.get(0);

        pexprNode1 = new ABindExpr(pbindexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce APureExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PPureExpr ppureexprNode2;
        ppureexprNode2 = (PPureExpr)nodeArrayList1.get(0);

        pexprNode1 = new APureExpr(ppureexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AFundefBindExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBindExpr pbindexprNode1;
        pbindexprNode1 = (PBindExpr)nodeArrayList1.get(0);
	nodeList.add(pbindexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAfundeffunctiondefinition1FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBindExpr pbindexprNode1;
        {
            // Block
        TInt tintNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        tintNode2 = (TInt)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pbindexprNode1 = new AFundefBindExpr(tintNode2, tidentifierNode3, listNode5, listNode7);
        }
	nodeList.add(pbindexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAfundeffunctiondefinition2FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBindExpr pbindexprNode1;
        {
            // Block
        TInt tintNode2;
        TIdentifier tidentifierNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        tintNode2 = (TInt)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pbindexprNode1 = new AFundefBindExpr(tintNode2, tidentifierNode3, listNode5, listNode7);
        }
	nodeList.add(pbindexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAlistArgDeclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PFuncarg pfuncargNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfuncargNode2 = (PFuncarg)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfuncargNode2 != null)
	{
	  listNode3.add(pfuncargNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAsingleArgDeclList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFuncarg pfuncargNode1;
        pfuncargNode1 = (PFuncarg)nodeArrayList1.get(0);
	if(pfuncargNode1 != null)
	{
	  listNode2.add(pfuncargNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AFuncArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncarg pfuncargNode1;
        {
            // Block
        TInt tintNode2;
        TIdentifier tidentifierNode3;
        tintNode2 = (TInt)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pfuncargNode1 = new AArgtupFuncarg(tintNode2, tidentifierNode3);
        }
	nodeList.add(pfuncargNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ACmpPureExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPureExpr ppureexprNode1;
        {
            // Block
        TCmp tcmpNode2;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tcmpNode2 = (TCmp)nodeArrayList2.get(0);
        {
            // Block
        PPureExpr ppureexprNode3;
        PPureExpr ppureexprNode4;
        ppureexprNode3 = (PPureExpr)nodeArrayList1.get(0);
        ppureexprNode4 = (PPureExpr)nodeArrayList3.get(0);
	if(ppureexprNode3 != null)
	{
	  listNode5.add(ppureexprNode3);
	}
	if(ppureexprNode4 != null)
	{
	  listNode5.add(ppureexprNode4);
	}
        }

        ppureexprNode1 = new ACmpPureExpr(tcmpNode2, listNode5);
        }
	nodeList.add(ppureexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAtomPureExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPureExpr ppureexprNode1;
        ppureexprNode1 = (PPureExpr)nodeArrayList1.get(0);
	nodeList.add(ppureexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAcondatompureexpr1AtomPureExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPureExpr ppureexprNode1;
        {
            // Block
        PPureExpr ppureexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        ppureexprNode2 = (PPureExpr)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList10.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        ppureexprNode1 = new ACondPureExpr(ppureexprNode2, listNode4, listNode6);
        }
	nodeList.add(ppureexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAcondatompureexpr2AtomPureExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPureExpr ppureexprNode1;
        {
            // Block
        PPureExpr ppureexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        ppureexprNode2 = (PPureExpr)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList11.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        ppureexprNode1 = new ACondPureExpr(ppureexprNode2, listNode4, listNode6);
        }
	nodeList.add(ppureexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAcondatompureexpr3AtomPureExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPureExpr ppureexprNode1;
        {
            // Block
        PPureExpr ppureexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        ppureexprNode2 = (PPureExpr)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList10.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        ppureexprNode1 = new ACondPureExpr(ppureexprNode2, listNode4, listNode6);
        }
	nodeList.add(ppureexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAcondatompureexpr4AtomPureExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPureExpr ppureexprNode1;
        {
            // Block
        PPureExpr ppureexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        ppureexprNode2 = (PPureExpr)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList11.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        ppureexprNode1 = new ACondPureExpr(ppureexprNode2, listNode4, listNode6);
        }
	nodeList.add(ppureexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ANumberAtomPureExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPureExpr ppureexprNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        ppureexprNode1 = new ANumberPureExpr(tnumberNode2);
        }
	nodeList.add(ppureexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AVarAtomPureExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPureExpr ppureexprNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        ppureexprNode1 = new AVarPureExpr(tidentifierNode2);
        }
	nodeList.add(ppureexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ASeparator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AListSep */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {7, SHIFT, 1}, {9, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, },
			{{-1, ERROR, 1}, {1, SHIFT, 12}, },
			{{-1, ERROR, 2}, {11, SHIFT, 13}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 5}, {12, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {3, SHIFT, 14}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 15}, {4, SHIFT, 16}, },
			{{-1, ERROR, 12}, {7, SHIFT, 1}, {10, SHIFT, 3}, {11, SHIFT, 4}, },
			{{-1, ERROR, 13}, {1, SHIFT, 18}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 1}, {7, SHIFT, 1}, {9, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, },
			{{-1, ERROR, 16}, {7, SHIFT, 1}, {10, SHIFT, 3}, {11, SHIFT, 4}, },
			{{-1, ERROR, 17}, {2, SHIFT, 21}, },
			{{-1, ERROR, 18}, {9, SHIFT, 22}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 21}, {5, SHIFT, 25}, },
			{{-1, ERROR, 22}, {11, SHIFT, 26}, },
			{{-1, ERROR, 23}, {0, SHIFT, 27}, {2, SHIFT, 28}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 25}, {7, SHIFT, 1}, {9, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 28}, {5, SHIFT, 31}, },
			{{-1, ERROR, 29}, {9, SHIFT, 22}, },
			{{-1, ERROR, 30}, {3, SHIFT, 14}, {6, SHIFT, 33}, },
			{{-1, ERROR, 31}, {7, SHIFT, 1}, {9, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 33}, {8, SHIFT, 36}, },
			{{-1, ERROR, 34}, {6, SHIFT, 37}, {7, SHIFT, 1}, {9, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, },
			{{-1, ERROR, 35}, {3, SHIFT, 14}, {6, SHIFT, 38}, },
			{{-1, ERROR, 36}, {5, SHIFT, 40}, },
			{{-1, ERROR, 37}, {8, SHIFT, 41}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 39}, {6, SHIFT, 42}, {7, SHIFT, 1}, {9, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, },
			{{-1, ERROR, 40}, {7, SHIFT, 1}, {9, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, },
			{{-1, ERROR, 41}, {5, SHIFT, 44}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 43}, {3, SHIFT, 14}, {6, SHIFT, 45}, },
			{{-1, ERROR, 44}, {7, SHIFT, 1}, {9, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 46}, {6, SHIFT, 48}, {7, SHIFT, 1}, {9, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, },
			{{-1, ERROR, 47}, {3, SHIFT, 14}, {6, SHIFT, 49}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 50}, {6, SHIFT, 51}, {7, SHIFT, 1}, {9, SHIFT, 2}, {10, SHIFT, 3}, {11, SHIFT, 4}, },
			{{-1, REDUCE, 19}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 5}, },
			{{-1, 6}, {25, 30}, {31, 35}, {40, 43}, {44, 47}, },
			{{-1, -1}, },
			{{-1, 7}, {15, 19}, {34, 19}, {39, 19}, {46, 19}, {50, 19}, },
			{{-1, 8}, },
			{{-1, 9}, },
			{{-1, 23}, },
			{{-1, 24}, {29, 32}, },
			{{-1, 10}, {12, 17}, },
			{{-1, 11}, {16, 20}, },
			{{-1, 15}, {30, 34}, {35, 39}, {43, 46}, {47, 50}, },
			{{-1, 29}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'if', 'int', number, identifier",
			"expecting: '('",
			"expecting: identifier",
			"expecting: ')', ';', '==', '}', EOF",
			"expecting: EOF",
			"expecting: ';', EOF",
			"expecting: ';', '}', EOF",
			"expecting: 'if', number, identifier",
			"expecting: '}', 'if', 'int', number, identifier, EOF",
			"expecting: 'if', 'int', number, identifier, EOF",
			"expecting: ')'",
			"expecting: 'int'",
			"expecting: ')', ';', '}', EOF",
			"expecting: '{'",
			"expecting: ',', ')'",
			"expecting: ';', '}'",
			"expecting: 'else'",
			"expecting: '}', 'if', 'int', number, identifier",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 4, 5, 6, 6, 6, 6, 3, 7, 1, 8, 9, 7, 10, 11, 6, 12, 13, 2, 14, 14, 0, 14, 11, 13, 11, 15, 0, 14, 16, 17, 15, 13, 16, 6, 17, 0, 13, 6, 15, 0, 3, 17, 15, 3, 3, 17, 3, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
