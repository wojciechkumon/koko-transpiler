/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.koko.node;

import org.koko.analysis.*;

@SuppressWarnings("nls")
public final class ACIntType extends PCIntType
{
    private PSignedness _signedness_;
    private TInt _int_;

    public ACIntType()
    {
        // Constructor
    }

    public ACIntType(
        @SuppressWarnings("hiding") PSignedness _signedness_,
        @SuppressWarnings("hiding") TInt _int_)
    {
        // Constructor
        setSignedness(_signedness_);

        setInt(_int_);

    }

    @Override
    public Object clone()
    {
        return new ACIntType(
            cloneNode(this._signedness_),
            cloneNode(this._int_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACIntType(this);
    }

    public PSignedness getSignedness()
    {
        return this._signedness_;
    }

    public void setSignedness(PSignedness node)
    {
        if(this._signedness_ != null)
        {
            this._signedness_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._signedness_ = node;
    }

    public TInt getInt()
    {
        return this._int_;
    }

    public void setInt(TInt node)
    {
        if(this._int_ != null)
        {
            this._int_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._int_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._signedness_)
            + toString(this._int_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._signedness_ == child)
        {
            this._signedness_ = null;
            return;
        }

        if(this._int_ == child)
        {
            this._int_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._signedness_ == oldChild)
        {
            setSignedness((PSignedness) newChild);
            return;
        }

        if(this._int_ == oldChild)
        {
            setInt((TInt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
