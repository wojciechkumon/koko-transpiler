/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.koko.node;

import java.util.*;
import org.koko.analysis.*;

@SuppressWarnings("nls")
public final class AFundefBindExpr extends PBindExpr
{
    private TInt _ftype_;
    private TIdentifier _fname_;
    private final LinkedList<PFuncarg> _fargstypes_ = new LinkedList<PFuncarg>();
    private final LinkedList<PExpr> _fbody_ = new LinkedList<PExpr>();

    public AFundefBindExpr()
    {
        // Constructor
    }

    public AFundefBindExpr(
        @SuppressWarnings("hiding") TInt _ftype_,
        @SuppressWarnings("hiding") TIdentifier _fname_,
        @SuppressWarnings("hiding") List<?> _fargstypes_,
        @SuppressWarnings("hiding") List<?> _fbody_)
    {
        // Constructor
        setFtype(_ftype_);

        setFname(_fname_);

        setFargstypes(_fargstypes_);

        setFbody(_fbody_);

    }

    @Override
    public Object clone()
    {
        return new AFundefBindExpr(
            cloneNode(this._ftype_),
            cloneNode(this._fname_),
            cloneList(this._fargstypes_),
            cloneList(this._fbody_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFundefBindExpr(this);
    }

    public TInt getFtype()
    {
        return this._ftype_;
    }

    public void setFtype(TInt node)
    {
        if(this._ftype_ != null)
        {
            this._ftype_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ftype_ = node;
    }

    public TIdentifier getFname()
    {
        return this._fname_;
    }

    public void setFname(TIdentifier node)
    {
        if(this._fname_ != null)
        {
            this._fname_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fname_ = node;
    }

    public LinkedList<PFuncarg> getFargstypes()
    {
        return this._fargstypes_;
    }

    public void setFargstypes(List<?> list)
    {
        for(PFuncarg e : this._fargstypes_)
        {
            e.parent(null);
        }
        this._fargstypes_.clear();

        for(Object obj_e : list)
        {
            PFuncarg e = (PFuncarg) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._fargstypes_.add(e);
        }
    }

    public LinkedList<PExpr> getFbody()
    {
        return this._fbody_;
    }

    public void setFbody(List<?> list)
    {
        for(PExpr e : this._fbody_)
        {
            e.parent(null);
        }
        this._fbody_.clear();

        for(Object obj_e : list)
        {
            PExpr e = (PExpr) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._fbody_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ftype_)
            + toString(this._fname_)
            + toString(this._fargstypes_)
            + toString(this._fbody_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ftype_ == child)
        {
            this._ftype_ = null;
            return;
        }

        if(this._fname_ == child)
        {
            this._fname_ = null;
            return;
        }

        if(this._fargstypes_.remove(child))
        {
            return;
        }

        if(this._fbody_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ftype_ == oldChild)
        {
            setFtype((TInt) newChild);
            return;
        }

        if(this._fname_ == oldChild)
        {
            setFname((TIdentifier) newChild);
            return;
        }

        for(ListIterator<PFuncarg> i = this._fargstypes_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFuncarg) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PExpr> i = this._fbody_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExpr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
