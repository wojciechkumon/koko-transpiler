/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.koko.node;

import org.koko.analysis.*;

@SuppressWarnings("nls")
public final class AArgtupFuncarg extends PFuncarg
{
    private TInt _argtype_;
    private TIdentifier _argvar_;

    public AArgtupFuncarg()
    {
        // Constructor
    }

    public AArgtupFuncarg(
        @SuppressWarnings("hiding") TInt _argtype_,
        @SuppressWarnings("hiding") TIdentifier _argvar_)
    {
        // Constructor
        setArgtype(_argtype_);

        setArgvar(_argvar_);

    }

    @Override
    public Object clone()
    {
        return new AArgtupFuncarg(
            cloneNode(this._argtype_),
            cloneNode(this._argvar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArgtupFuncarg(this);
    }

    public TInt getArgtype()
    {
        return this._argtype_;
    }

    public void setArgtype(TInt node)
    {
        if(this._argtype_ != null)
        {
            this._argtype_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argtype_ = node;
    }

    public TIdentifier getArgvar()
    {
        return this._argvar_;
    }

    public void setArgvar(TIdentifier node)
    {
        if(this._argvar_ != null)
        {
            this._argvar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argvar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._argtype_)
            + toString(this._argvar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._argtype_ == child)
        {
            this._argtype_ = null;
            return;
        }

        if(this._argvar_ == child)
        {
            this._argvar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._argtype_ == oldChild)
        {
            setArgtype((TInt) newChild);
            return;
        }

        if(this._argvar_ == oldChild)
        {
            setArgvar((TIdentifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
