/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.koko.node;

import org.koko.analysis.*;

@SuppressWarnings("nls")
public final class ASigSignedness extends PSignedness
{
    private TSigned _signed_;

    public ASigSignedness()
    {
        // Constructor
    }

    public ASigSignedness(
        @SuppressWarnings("hiding") TSigned _signed_)
    {
        // Constructor
        setSigned(_signed_);

    }

    @Override
    public Object clone()
    {
        return new ASigSignedness(
            cloneNode(this._signed_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASigSignedness(this);
    }

    public TSigned getSigned()
    {
        return this._signed_;
    }

    public void setSigned(TSigned node)
    {
        if(this._signed_ != null)
        {
            this._signed_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._signed_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._signed_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._signed_ == child)
        {
            this._signed_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._signed_ == oldChild)
        {
            setSigned((TSigned) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
